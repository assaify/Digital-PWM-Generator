
PWMGenV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ddc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08003f7c  08003f7c  00013f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800408c  0800408c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800408c  0800408c  0001408c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004094  08004094  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800409c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000005c  080040f8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  080040f8  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009542  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a3d  00000000  00000000  00029611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  0002b050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007f3  00000000  00000000  0002bac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016209  00000000  00000000  0002c2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c399  00000000  00000000  000424c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ab27  00000000  00000000  0004e85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f40  00000000  00000000  000d9384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000dc2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003f64 	.word	0x08003f64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003f64 	.word	0x08003f64

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <DWT_Delay_Init+0x58>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <DWT_Delay_Init+0x58>)
 8000586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800058a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <DWT_Delay_Init+0x58>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <DWT_Delay_Init+0x58>)
 8000592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000596:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <DWT_Delay_Init+0x5c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <DWT_Delay_Init+0x5c>)
 800059e:	f023 0301 	bic.w	r3, r3, #1
 80005a2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <DWT_Delay_Init+0x5c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <DWT_Delay_Init+0x5c>)
 80005aa:	f043 0301 	orr.w	r3, r3, #1
 80005ae:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <DWT_Delay_Init+0x5c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80005b6:	bf00      	nop
    __ASM volatile ("NOP");
 80005b8:	bf00      	nop
    __ASM volatile ("NOP");
 80005ba:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <DWT_Delay_Init+0x5c>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80005c4:	2300      	movs	r3, #0
 80005c6:	e000      	b.n	80005ca <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80005c8:	2301      	movs	r3, #1
    }
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	e000edf0 	.word	0xe000edf0
 80005d8:	e0001000 	.word	0xe0001000

080005dc <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <DWT_Delay_us+0x48>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80005ea:	f002 f98b 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <DWT_Delay_us+0x4c>)
 80005f2:	fba2 2303 	umull	r2, r3, r2, r3
 80005f6:	0c9b      	lsrs	r3, r3, #18
 80005f8:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	68ba      	ldr	r2, [r7, #8]
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000604:	bf00      	nop
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <DWT_Delay_us+0x48>)
 8000608:	685a      	ldr	r2, [r3, #4]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	1ad2      	subs	r2, r2, r3
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	1acb      	subs	r3, r1, r3
 8000614:	429a      	cmp	r2, r3
 8000616:	d3f6      	bcc.n	8000606 <DWT_Delay_us+0x2a>
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	e0001000 	.word	0xe0001000
 8000628:	431bde83 	.word	0x431bde83

0800062c <DWT_Delay_ms>:

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <DWT_Delay_ms+0x44>)
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 800063a:	f002 f963 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 800063e:	4603      	mov	r3, r0
 8000640:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <DWT_Delay_ms+0x48>)
 8000642:	fba2 2303 	umull	r2, r3, r2, r3
 8000646:	099b      	lsrs	r3, r3, #6
 8000648:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	fb02 f303 	mul.w	r3, r2, r3
 8000652:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000654:	bf00      	nop
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <DWT_Delay_ms+0x44>)
 8000658:	685a      	ldr	r2, [r3, #4]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	1ad2      	subs	r2, r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	429a      	cmp	r2, r3
 8000662:	d3f8      	bcc.n	8000656 <DWT_Delay_ms+0x2a>
}
 8000664:	bf00      	nop
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	e0001000 	.word	0xe0001000
 8000674:	10624dd3 	.word	0x10624dd3

08000678 <LCD_DATA>:


//-----[ Alphanumeric LCD 16x2 Routines ]-----

void LCD_DATA(unsigned char Data)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
    if(Data & 1)
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 0301 	and.w	r3, r3, #1
 8000688:	2b00      	cmp	r3, #0
 800068a:	d008      	beq.n	800069e <LCD_DATA+0x26>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 1);
 800068c:	4b2b      	ldr	r3, [pc, #172]	; (800073c <LCD_DATA+0xc4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a2a      	ldr	r2, [pc, #168]	; (800073c <LCD_DATA+0xc4>)
 8000692:	8891      	ldrh	r1, [r2, #4]
 8000694:	2201      	movs	r2, #1
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fcde 	bl	8002058 <HAL_GPIO_WritePin>
 800069c:	e007      	b.n	80006ae <LCD_DATA+0x36>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 0);
 800069e:	4b27      	ldr	r3, [pc, #156]	; (800073c <LCD_DATA+0xc4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a26      	ldr	r2, [pc, #152]	; (800073c <LCD_DATA+0xc4>)
 80006a4:	8891      	ldrh	r1, [r2, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fcd5 	bl	8002058 <HAL_GPIO_WritePin>
    if(Data & 2)
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 0302 	and.w	r3, r3, #2
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d008      	beq.n	80006ca <LCD_DATA+0x52>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 1);
 80006b8:	4b20      	ldr	r3, [pc, #128]	; (800073c <LCD_DATA+0xc4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a1f      	ldr	r2, [pc, #124]	; (800073c <LCD_DATA+0xc4>)
 80006be:	88d1      	ldrh	r1, [r2, #6]
 80006c0:	2201      	movs	r2, #1
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fcc8 	bl	8002058 <HAL_GPIO_WritePin>
 80006c8:	e007      	b.n	80006da <LCD_DATA+0x62>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 0);
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <LCD_DATA+0xc4>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a1b      	ldr	r2, [pc, #108]	; (800073c <LCD_DATA+0xc4>)
 80006d0:	88d1      	ldrh	r1, [r2, #6]
 80006d2:	2200      	movs	r2, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fcbf 	bl	8002058 <HAL_GPIO_WritePin>
    if(Data & 4)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d008      	beq.n	80006f6 <LCD_DATA+0x7e>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 1);
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <LCD_DATA+0xc4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a14      	ldr	r2, [pc, #80]	; (800073c <LCD_DATA+0xc4>)
 80006ea:	8911      	ldrh	r1, [r2, #8]
 80006ec:	2201      	movs	r2, #1
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fcb2 	bl	8002058 <HAL_GPIO_WritePin>
 80006f4:	e007      	b.n	8000706 <LCD_DATA+0x8e>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 0);
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <LCD_DATA+0xc4>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a10      	ldr	r2, [pc, #64]	; (800073c <LCD_DATA+0xc4>)
 80006fc:	8911      	ldrh	r1, [r2, #8]
 80006fe:	2200      	movs	r2, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f001 fca9 	bl	8002058 <HAL_GPIO_WritePin>
    if(Data & 8)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f003 0308 	and.w	r3, r3, #8
 800070c:	2b00      	cmp	r3, #0
 800070e:	d008      	beq.n	8000722 <LCD_DATA+0xaa>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 1);
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <LCD_DATA+0xc4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a09      	ldr	r2, [pc, #36]	; (800073c <LCD_DATA+0xc4>)
 8000716:	8951      	ldrh	r1, [r2, #10]
 8000718:	2201      	movs	r2, #1
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fc9c 	bl	8002058 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
}
 8000720:	e007      	b.n	8000732 <LCD_DATA+0xba>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <LCD_DATA+0xc4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <LCD_DATA+0xc4>)
 8000728:	8951      	ldrh	r1, [r2, #10]
 800072a:	2200      	movs	r2, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fc93 	bl	8002058 <HAL_GPIO_WritePin>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	08004034 	.word	0x08004034

08000740 <LCD_CMD>:
void LCD_CMD(unsigned char a_CMD)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
    // Select Command Register
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 0);
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <LCD_CMD+0x60>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <LCD_CMD+0x60>)
 8000750:	89d1      	ldrh	r1, [r2, #14]
 8000752:	2200      	movs	r2, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f001 fc7f 	bl	8002058 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
    LCD_DATA(a_CMD);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff8b 	bl	8000678 <LCD_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <LCD_CMD+0x60>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <LCD_CMD+0x60>)
 8000768:	8991      	ldrh	r1, [r2, #12]
 800076a:	2201      	movs	r2, #1
 800076c:	4618      	mov	r0, r3
 800076e:	f001 fc73 	bl	8002058 <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <LCD_CMD+0x60>)
 8000774:	8a1b      	ldrh	r3, [r3, #16]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff30 	bl	80005dc <DWT_Delay_us>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <LCD_CMD+0x60>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <LCD_CMD+0x60>)
 8000782:	8991      	ldrh	r1, [r2, #12]
 8000784:	2200      	movs	r2, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fc66 	bl	8002058 <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <LCD_CMD+0x60>)
 800078e:	8a1b      	ldrh	r3, [r3, #16]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff23 	bl	80005dc <DWT_Delay_us>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	08004034 	.word	0x08004034

080007a4 <LCD_Clear>:
void LCD_Clear()
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    LCD_CMD(0);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f7ff ffc9 	bl	8000740 <LCD_CMD>
    LCD_CMD(1);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff ffc6 	bl	8000740 <LCD_CMD>
    DWT_Delay_us(70);
 80007b4:	2046      	movs	r0, #70	; 0x46
 80007b6:	f7ff ff11 	bl	80005dc <DWT_Delay_us>
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}

080007be <LCD_Set_Cursor>:
void LCD_Set_Cursor(unsigned char r, unsigned char c)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b084      	sub	sp, #16
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	460a      	mov	r2, r1
 80007c8:	71fb      	strb	r3, [r7, #7]
 80007ca:	4613      	mov	r3, r2
 80007cc:	71bb      	strb	r3, [r7, #6]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d111      	bne.n	80007f8 <LCD_Set_Cursor+0x3a>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 80007d4:	79bb      	ldrb	r3, [r7, #6]
 80007d6:	337f      	adds	r3, #127	; 0x7f
 80007d8:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	091b      	lsrs	r3, r3, #4
 80007de:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	f003 030f 	and.w	r3, r3, #15
 80007e6:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ffa8 	bl	8000740 <LCD_CMD>
      LCD_CMD(Low4);
 80007f0:	7b7b      	ldrb	r3, [r7, #13]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ffa4 	bl	8000740 <LCD_CMD>
    }
    if(r == 2)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d111      	bne.n	8000822 <LCD_Set_Cursor+0x64>
    {
      Temp  = 0xC0 + c - 1;
 80007fe:	79bb      	ldrb	r3, [r7, #6]
 8000800:	3b41      	subs	r3, #65	; 0x41
 8000802:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	091b      	lsrs	r3, r3, #4
 8000808:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	f003 030f 	and.w	r3, r3, #15
 8000810:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff93 	bl	8000740 <LCD_CMD>
      LCD_CMD(Low4);
 800081a:	7b7b      	ldrb	r3, [r7, #13]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff8f 	bl	8000740 <LCD_CMD>
    }
    DWT_Delay_ms(2);
 8000822:	2002      	movs	r0, #2
 8000824:	f7ff ff02 	bl	800062c <DWT_Delay_ms>
}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <LCD_Init>:
void LCD_Init()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
	// Initialize The DWT Delay Function Which Will Be Used Later On
	DWT_Delay_Init();
 8000846:	f7ff fe99 	bl	800057c <DWT_Delay_Init>
    // IO Pin Configurations
	if(LCD16x2_CfgParam.LCD_GPIO == GPIOA)
 800084a:	4b74      	ldr	r3, [pc, #464]	; (8000a1c <LCD_Init+0x1ec>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a74      	ldr	r2, [pc, #464]	; (8000a20 <LCD_Init+0x1f0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d10e      	bne.n	8000872 <LCD_Init+0x42>
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	4b72      	ldr	r3, [pc, #456]	; (8000a24 <LCD_Init+0x1f4>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085c:	4a71      	ldr	r2, [pc, #452]	; (8000a24 <LCD_Init+0x1f4>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	6313      	str	r3, [r2, #48]	; 0x30
 8000864:	4b6f      	ldr	r3, [pc, #444]	; (8000a24 <LCD_Init+0x1f4>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	e03a      	b.n	80008e8 <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOB)
 8000872:	4b6a      	ldr	r3, [pc, #424]	; (8000a1c <LCD_Init+0x1ec>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a6c      	ldr	r2, [pc, #432]	; (8000a28 <LCD_Init+0x1f8>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d10e      	bne.n	800089a <LCD_Init+0x6a>
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	4b68      	ldr	r3, [pc, #416]	; (8000a24 <LCD_Init+0x1f4>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	4a67      	ldr	r2, [pc, #412]	; (8000a24 <LCD_Init+0x1f4>)
 8000886:	f043 0302 	orr.w	r3, r3, #2
 800088a:	6313      	str	r3, [r2, #48]	; 0x30
 800088c:	4b65      	ldr	r3, [pc, #404]	; (8000a24 <LCD_Init+0x1f4>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	f003 0302 	and.w	r3, r3, #2
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	e026      	b.n	80008e8 <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOC)
 800089a:	4b60      	ldr	r3, [pc, #384]	; (8000a1c <LCD_Init+0x1ec>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a63      	ldr	r2, [pc, #396]	; (8000a2c <LCD_Init+0x1fc>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d10e      	bne.n	80008c2 <LCD_Init+0x92>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	4b5e      	ldr	r3, [pc, #376]	; (8000a24 <LCD_Init+0x1f4>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	4a5d      	ldr	r2, [pc, #372]	; (8000a24 <LCD_Init+0x1f4>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	6313      	str	r3, [r2, #48]	; 0x30
 80008b4:	4b5b      	ldr	r3, [pc, #364]	; (8000a24 <LCD_Init+0x1f4>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	e012      	b.n	80008e8 <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOD)
 80008c2:	4b56      	ldr	r3, [pc, #344]	; (8000a1c <LCD_Init+0x1ec>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a5a      	ldr	r2, [pc, #360]	; (8000a30 <LCD_Init+0x200>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d10d      	bne.n	80008e8 <LCD_Init+0xb8>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	4b54      	ldr	r3, [pc, #336]	; (8000a24 <LCD_Init+0x1f4>)
 80008d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d4:	4a53      	ldr	r2, [pc, #332]	; (8000a24 <LCD_Init+0x1f4>)
 80008d6:	f043 0308 	orr.w	r3, r3, #8
 80008da:	6313      	str	r3, [r2, #48]	; 0x30
 80008dc:	4b51      	ldr	r3, [pc, #324]	; (8000a24 <LCD_Init+0x1f4>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	f003 0308 	and.w	r3, r3, #8
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, GPIO_PIN_RESET);
 80008e8:	4b4c      	ldr	r3, [pc, #304]	; (8000a1c <LCD_Init+0x1ec>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a4b      	ldr	r2, [pc, #300]	; (8000a1c <LCD_Init+0x1ec>)
 80008ee:	8891      	ldrh	r1, [r2, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 fbb0 	bl	8002058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, GPIO_PIN_RESET);
 80008f8:	4b48      	ldr	r3, [pc, #288]	; (8000a1c <LCD_Init+0x1ec>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a47      	ldr	r2, [pc, #284]	; (8000a1c <LCD_Init+0x1ec>)
 80008fe:	88d1      	ldrh	r1, [r2, #6]
 8000900:	2200      	movs	r2, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f001 fba8 	bl	8002058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, GPIO_PIN_RESET);
 8000908:	4b44      	ldr	r3, [pc, #272]	; (8000a1c <LCD_Init+0x1ec>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a43      	ldr	r2, [pc, #268]	; (8000a1c <LCD_Init+0x1ec>)
 800090e:	8911      	ldrh	r1, [r2, #8]
 8000910:	2200      	movs	r2, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f001 fba0 	bl	8002058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, GPIO_PIN_RESET);
 8000918:	4b40      	ldr	r3, [pc, #256]	; (8000a1c <LCD_Init+0x1ec>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a3f      	ldr	r2, [pc, #252]	; (8000a1c <LCD_Init+0x1ec>)
 800091e:	8951      	ldrh	r1, [r2, #10]
 8000920:	2200      	movs	r2, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fb98 	bl	8002058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 8000928:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <LCD_Init+0x1ec>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a3b      	ldr	r2, [pc, #236]	; (8000a1c <LCD_Init+0x1ec>)
 800092e:	89d1      	ldrh	r1, [r2, #14]
 8000930:	2200      	movs	r2, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f001 fb90 	bl	8002058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 8000938:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <LCD_Init+0x1ec>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a37      	ldr	r2, [pc, #220]	; (8000a1c <LCD_Init+0x1ec>)
 800093e:	8991      	ldrh	r1, [r2, #12]
 8000940:	2200      	movs	r2, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f001 fb88 	bl	8002058 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 8000948:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <LCD_Init+0x1ec>)
 800094a:	889a      	ldrh	r2, [r3, #4]
 800094c:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <LCD_Init+0x1ec>)
 800094e:	88db      	ldrh	r3, [r3, #6]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000950:	4313      	orrs	r3, r2
 8000952:	b29a      	uxth	r2, r3
 8000954:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <LCD_Init+0x1ec>)
 8000956:	891b      	ldrh	r3, [r3, #8]
 8000958:	4313      	orrs	r3, r2
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <LCD_Init+0x1ec>)
 800095e:	895b      	ldrh	r3, [r3, #10]
 8000960:	4313      	orrs	r3, r2
 8000962:	b29a      	uxth	r2, r3
 8000964:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <LCD_Init+0x1ec>)
 8000966:	89db      	ldrh	r3, [r3, #14]
 8000968:	4313      	orrs	r3, r2
 800096a:	b29a      	uxth	r2, r3
			LCD16x2_CfgParam.EN_PIN;
 800096c:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <LCD_Init+0x1ec>)
 800096e:	899b      	ldrh	r3, [r3, #12]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000970:	4313      	orrs	r3, r2
 8000972:	b29b      	uxth	r3, r3
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 8000974:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD16x2_CfgParam.LCD_GPIO, &GPIO_InitStruct);
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <LCD_Init+0x1ec>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f107 0214 	add.w	r2, r7, #20
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f001 f9c7 	bl	8001d20 <HAL_GPIO_Init>

	// The Init. Procedure As Described In The Datasheet
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 8000992:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <LCD_Init+0x1ec>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <LCD_Init+0x1ec>)
 8000998:	89d1      	ldrh	r1, [r2, #14]
 800099a:	2200      	movs	r2, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fb5b 	bl	8002058 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 80009a2:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <LCD_Init+0x1ec>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a1d      	ldr	r2, [pc, #116]	; (8000a1c <LCD_Init+0x1ec>)
 80009a8:	8991      	ldrh	r1, [r2, #12]
 80009aa:	2200      	movs	r2, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 fb53 	bl	8002058 <HAL_GPIO_WritePin>
    LCD_DATA(0x00);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff fe60 	bl	8000678 <LCD_DATA>
    DWT_Delay_ms(150);
 80009b8:	2096      	movs	r0, #150	; 0x96
 80009ba:	f7ff fe37 	bl	800062c <DWT_Delay_ms>
    LCD_CMD(0x03);
 80009be:	2003      	movs	r0, #3
 80009c0:	f7ff febe 	bl	8000740 <LCD_CMD>
    DWT_Delay_ms(5);
 80009c4:	2005      	movs	r0, #5
 80009c6:	f7ff fe31 	bl	800062c <DWT_Delay_ms>
    LCD_CMD(0x03);
 80009ca:	2003      	movs	r0, #3
 80009cc:	f7ff feb8 	bl	8000740 <LCD_CMD>
    DWT_Delay_us(150);
 80009d0:	2096      	movs	r0, #150	; 0x96
 80009d2:	f7ff fe03 	bl	80005dc <DWT_Delay_us>
    LCD_CMD(0x03);
 80009d6:	2003      	movs	r0, #3
 80009d8:	f7ff feb2 	bl	8000740 <LCD_CMD>
    LCD_CMD(0x02);
 80009dc:	2002      	movs	r0, #2
 80009de:	f7ff feaf 	bl	8000740 <LCD_CMD>
    LCD_CMD(0x02);
 80009e2:	2002      	movs	r0, #2
 80009e4:	f7ff feac 	bl	8000740 <LCD_CMD>
    LCD_CMD(0x08);
 80009e8:	2008      	movs	r0, #8
 80009ea:	f7ff fea9 	bl	8000740 <LCD_CMD>
    LCD_CMD(0x00);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff fea6 	bl	8000740 <LCD_CMD>
    LCD_CMD(0x0C);
 80009f4:	200c      	movs	r0, #12
 80009f6:	f7ff fea3 	bl	8000740 <LCD_CMD>
    LCD_CMD(0x00);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff fea0 	bl	8000740 <LCD_CMD>
    LCD_CMD(0x06);
 8000a00:	2006      	movs	r0, #6
 8000a02:	f7ff fe9d 	bl	8000740 <LCD_CMD>
    LCD_CMD(0x00);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff fe9a 	bl	8000740 <LCD_CMD>
    LCD_CMD(0x01);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f7ff fe97 	bl	8000740 <LCD_CMD>
}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	08004034 	.word	0x08004034
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <LCD_Write_Char>:
void LCD_Write_Char(char Data)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
   char Low4,High4;
   Low4  = Data & 0x0F;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f003 030f 	and.w	r3, r3, #15
 8000a44:	73fb      	strb	r3, [r7, #15]
   High4 = Data & 0xF0;
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	f023 030f 	bic.w	r3, r3, #15
 8000a4c:	73bb      	strb	r3, [r7, #14]

   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 1);
 8000a4e:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <LCD_Write_Char+0xb0>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a24      	ldr	r2, [pc, #144]	; (8000ae4 <LCD_Write_Char+0xb0>)
 8000a54:	89d1      	ldrh	r1, [r2, #14]
 8000a56:	2201      	movs	r2, #1
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fafd 	bl	8002058 <HAL_GPIO_WritePin>

   LCD_DATA(High4>>4);
 8000a5e:	7bbb      	ldrb	r3, [r7, #14]
 8000a60:	091b      	lsrs	r3, r3, #4
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fe07 	bl	8000678 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <LCD_Write_Char+0xb0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ae4 <LCD_Write_Char+0xb0>)
 8000a70:	8991      	ldrh	r1, [r2, #12]
 8000a72:	2201      	movs	r2, #1
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 faef 	bl	8002058 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <LCD_Write_Char+0xb0>)
 8000a7c:	8a1b      	ldrh	r3, [r3, #16]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fdac 	bl	80005dc <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <LCD_Write_Char+0xb0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <LCD_Write_Char+0xb0>)
 8000a8a:	8991      	ldrh	r1, [r2, #12]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fae2 	bl	8002058 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <LCD_Write_Char+0xb0>)
 8000a96:	8a1b      	ldrh	r3, [r3, #16]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fd9f 	bl	80005dc <DWT_Delay_us>

   LCD_DATA(Low4);
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fde9 	bl	8000678 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <LCD_Write_Char+0xb0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <LCD_Write_Char+0xb0>)
 8000aac:	8991      	ldrh	r1, [r2, #12]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fad1 	bl	8002058 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <LCD_Write_Char+0xb0>)
 8000ab8:	8a1b      	ldrh	r3, [r3, #16]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fd8e 	bl	80005dc <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <LCD_Write_Char+0xb0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <LCD_Write_Char+0xb0>)
 8000ac6:	8991      	ldrh	r1, [r2, #12]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 fac4 	bl	8002058 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <LCD_Write_Char+0xb0>)
 8000ad2:	8a1b      	ldrh	r3, [r3, #16]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fd81 	bl	80005dc <DWT_Delay_us>
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	08004034 	.word	0x08004034

08000ae8 <LCD_Write_String>:
void LCD_Write_String(char *str)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
    int i;
    for(i=0;str[i]!='\0';i++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	e009      	b.n	8000b0a <LCD_Write_String+0x22>
       LCD_Write_Char(str[i]);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff98 	bl	8000a34 <LCD_Write_Char>
    for(i=0;str[i]!='\0';i++)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3301      	adds	r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d1ef      	bne.n	8000af6 <LCD_Write_String+0xe>
}
 8000b16:	bf00      	nop
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b24:	f000 ff78 	bl	8001a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b28:	f000 f892 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2c:	f000 f970 	bl	8000e10 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b30:	f000 f8f8 	bl	8000d24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CLKPrev = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000b34:	2102      	movs	r1, #2
 8000b36:	4837      	ldr	r0, [pc, #220]	; (8000c14 <main+0xf4>)
 8000b38:	f001 fa76 	bl	8002028 <HAL_GPIO_ReadPin>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <main+0xf8>)
 8000b42:	601a      	str	r2, [r3, #0]
  DTPrev = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8000b44:	2104      	movs	r1, #4
 8000b46:	4833      	ldr	r0, [pc, #204]	; (8000c14 <main+0xf4>)
 8000b48:	f001 fa6e 	bl	8002028 <HAL_GPIO_ReadPin>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <main+0xfc>)
 8000b52:	601a      	str	r2, [r3, #0]
  ds = 50;
 8000b54:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <main+0x100>)
 8000b56:	2232      	movs	r2, #50	; 0x32
 8000b58:	601a      	str	r2, [r3, #0]
  freq = 1000;
 8000b5a:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <main+0x104>)
 8000b5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b60:	601a      	str	r2, [r3, #0]
  menu = 1;
 8000b62:	4b31      	ldr	r3, [pc, #196]	; (8000c28 <main+0x108>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	601a      	str	r2, [r3, #0]
  pointer_pos = 1;
 8000b68:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <main+0x10c>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
  multiplier = 0;
 8000b6e:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <main+0x110>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
  generate_pwm = 0;
 8000b74:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <main+0x114>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]

  LCDRefresh = 1;
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <main+0x118>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]
  LCDRefreshPWM = 1;
 8000b80:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <main+0x11c>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
  LCDRefreshMenu = 1;
 8000b86:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <main+0x120>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	601a      	str	r2, [r3, #0]
  LCDRefreshMul = 0;
 8000b8c:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <main+0x124>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
  PWMRefresh = 1;
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <main+0x128>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	601a      	str	r2, [r3, #0]
  PWMToggle = 0;
 8000b98:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <main+0x12c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]

  LCD_Init();
 8000b9e:	f7ff fe47 	bl	8000830 <LCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (LCDRefresh == 1)
 8000ba2:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <main+0x118>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d110      	bne.n	8000bcc <main+0xac>
	  {
		  if (LCDRefreshMenu == 1)
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <main+0x120>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d104      	bne.n	8000bbc <main+0x9c>
		  {
			  LCD_Change_Menu();
 8000bb2:	f000 f9b7 	bl	8000f24 <LCD_Change_Menu>
			  LCDRefreshMenu = 0;
 8000bb6:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <main+0x120>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
		  }
		  LCD_Update();
 8000bbc:	f000 f9e0 	bl	8000f80 <LCD_Update>
		  LCDRefresh = 0;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <main+0x118>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
		  LCDRefreshPWM = 0;
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <main+0x11c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
	  }
	  if (LCDRefreshMul == 1)
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <main+0x124>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d104      	bne.n	8000bde <main+0xbe>
	  {
		  LCD_Update_Mul();
 8000bd4:	f000 fac4 	bl	8001160 <LCD_Update_Mul>
		  LCDRefreshMul = 0;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <main+0x124>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
	  }
	  if (PWMRefresh == 1)
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <main+0x128>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d104      	bne.n	8000bf0 <main+0xd0>
	  {
		  PWM_Calc();
 8000be6:	f000 fb35 	bl	8001254 <PWM_Calc>
		  PWMRefresh = 0;
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <main+0x128>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
	  }
	  if (PWMToggle == 1)
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <main+0x12c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d1d4      	bne.n	8000ba2 <main+0x82>
	  {
		  if(generate_pwm == 1)
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <main+0x114>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d102      	bne.n	8000c06 <main+0xe6>
		  {
			  PWM_Gen();
 8000c00:	f000 fb5a 	bl	80012b8 <PWM_Gen>
 8000c04:	e001      	b.n	8000c0a <main+0xea>
		  }
		  else
		  {
			  PWM_Stop();
 8000c06:	f000 fb7f 	bl	8001308 <PWM_Stop>
		  }
		  PWMToggle = 0;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <main+0x12c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
	  if (LCDRefresh == 1)
 8000c10:	e7c7      	b.n	8000ba2 <main+0x82>
 8000c12:	bf00      	nop
 8000c14:	40020400 	.word	0x40020400
 8000c18:	200000fc 	.word	0x200000fc
 8000c1c:	20000100 	.word	0x20000100
 8000c20:	200000c0 	.word	0x200000c0
 8000c24:	200000c4 	.word	0x200000c4
 8000c28:	200000c8 	.word	0x200000c8
 8000c2c:	200000cc 	.word	0x200000cc
 8000c30:	200000d0 	.word	0x200000d0
 8000c34:	200000d4 	.word	0x200000d4
 8000c38:	200000e4 	.word	0x200000e4
 8000c3c:	200000ec 	.word	0x200000ec
 8000c40:	200000e8 	.word	0x200000e8
 8000c44:	200000f0 	.word	0x200000f0
 8000c48:	200000f4 	.word	0x200000f4
 8000c4c:	200000f8 	.word	0x200000f8

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	2230      	movs	r2, #48	; 0x30
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f002 fcfc 	bl	800365c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <SystemClock_Config+0xcc>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	4a27      	ldr	r2, [pc, #156]	; (8000d1c <SystemClock_Config+0xcc>)
 8000c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c82:	6413      	str	r3, [r2, #64]	; 0x40
 8000c84:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <SystemClock_Config+0xcc>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <SystemClock_Config+0xd0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c9c:	4a20      	ldr	r2, [pc, #128]	; (8000d20 <SystemClock_Config+0xd0>)
 8000c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <SystemClock_Config+0xd0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb8:	2310      	movs	r3, #16
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000cc8:	2354      	movs	r3, #84	; 0x54
 8000cca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd4:	f107 0320 	add.w	r3, r7, #32
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 f9ef 	bl	80020bc <HAL_RCC_OscConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ce4:	f000 fd62 	bl	80017ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce8:	230f      	movs	r3, #15
 8000cea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cec:	2302      	movs	r3, #2
 8000cee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	2102      	movs	r1, #2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 fc51 	bl	80025ac <HAL_RCC_ClockConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d10:	f000 fd4c 	bl	80017ac <Error_Handler>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3750      	adds	r7, #80	; 0x50
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40007000 	.word	0x40007000

08000d24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08e      	sub	sp, #56	; 0x38
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d38:	f107 0320 	add.w	r3, r7, #32
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
 8000d50:	615a      	str	r2, [r3, #20]
 8000d52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d54:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <MX_TIM2_Init+0xe8>)
 8000d56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d5c:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <MX_TIM2_Init+0xe8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <MX_TIM2_Init+0xe8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1399;
 8000d68:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <MX_TIM2_Init+0xe8>)
 8000d6a:	f240 5277 	movw	r2, #1399	; 0x577
 8000d6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <MX_TIM2_Init+0xe8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d76:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <MX_TIM2_Init+0xe8>)
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d7c:	4823      	ldr	r0, [pc, #140]	; (8000e0c <MX_TIM2_Init+0xe8>)
 8000d7e:	f001 fdcd 	bl	800291c <HAL_TIM_Base_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d88:	f000 fd10 	bl	80017ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d96:	4619      	mov	r1, r3
 8000d98:	481c      	ldr	r0, [pc, #112]	; (8000e0c <MX_TIM2_Init+0xe8>)
 8000d9a:	f002 f83d 	bl	8002e18 <HAL_TIM_ConfigClockSource>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000da4:	f000 fd02 	bl	80017ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000da8:	4818      	ldr	r0, [pc, #96]	; (8000e0c <MX_TIM2_Init+0xe8>)
 8000daa:	f001 fe06 	bl	80029ba <HAL_TIM_PWM_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000db4:	f000 fcfa 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc0:	f107 0320 	add.w	r3, r7, #32
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4811      	ldr	r0, [pc, #68]	; (8000e0c <MX_TIM2_Init+0xe8>)
 8000dc8:	f002 fbba 	bl	8003540 <HAL_TIMEx_MasterConfigSynchronization>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000dd2:	f000 fceb 	bl	80017ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd6:	2360      	movs	r3, #96	; 0x60
 8000dd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	4619      	mov	r1, r3
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <MX_TIM2_Init+0xe8>)
 8000dee:	f001 ff51 	bl	8002c94 <HAL_TIM_PWM_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000df8:	f000 fcd8 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <MX_TIM2_Init+0xe8>)
 8000dfe:	f000 fd23 	bl	8001848 <HAL_TIM_MspPostInit>

}
 8000e02:	bf00      	nop
 8000e04:	3738      	adds	r7, #56	; 0x38
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000078 	.word	0x20000078

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	4b3c      	ldr	r3, [pc, #240]	; (8000f1c <MX_GPIO_Init+0x10c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a3b      	ldr	r2, [pc, #236]	; (8000f1c <MX_GPIO_Init+0x10c>)
 8000e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b39      	ldr	r3, [pc, #228]	; (8000f1c <MX_GPIO_Init+0x10c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <MX_GPIO_Init+0x10c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a34      	ldr	r2, [pc, #208]	; (8000f1c <MX_GPIO_Init+0x10c>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <MX_GPIO_Init+0x10c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <MX_GPIO_Init+0x10c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a2d      	ldr	r2, [pc, #180]	; (8000f1c <MX_GPIO_Init+0x10c>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <MX_GPIO_Init+0x10c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000e80:	4827      	ldr	r0, [pc, #156]	; (8000f20 <MX_GPIO_Init+0x110>)
 8000e82:	f001 f8e9 	bl	8002058 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e86:	2302      	movs	r3, #2
 8000e88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4821      	ldr	r0, [pc, #132]	; (8000f20 <MX_GPIO_Init+0x110>)
 8000e9c:	f000 ff40 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	481b      	ldr	r0, [pc, #108]	; (8000f20 <MX_GPIO_Init+0x110>)
 8000eb4:	f000 ff34 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000eb8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ebe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4814      	ldr	r0, [pc, #80]	; (8000f20 <MX_GPIO_Init+0x110>)
 8000ed0:	f000 ff26 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000ed4:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000ed8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	4619      	mov	r1, r3
 8000eec:	480c      	ldr	r0, [pc, #48]	; (8000f20 <MX_GPIO_Init+0x110>)
 8000eee:	f000 ff17 	bl	8001d20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2007      	movs	r0, #7
 8000ef8:	f000 fedb 	bl	8001cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000efc:	2007      	movs	r0, #7
 8000efe:	f000 fef4 	bl	8001cea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	2028      	movs	r0, #40	; 0x28
 8000f08:	f000 fed3 	bl	8001cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f0c:	2028      	movs	r0, #40	; 0x28
 8000f0e:	f000 feec 	bl	8001cea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f12:	bf00      	nop
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020400 	.word	0x40020400

08000f24 <LCD_Change_Menu>:

/* USER CODE BEGIN 4 */
static void LCD_Change_Menu(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	LCD_Clear();
 8000f28:	f7ff fc3c 	bl	80007a4 <LCD_Clear>
	switch (menu)
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <LCD_Change_Menu+0x50>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d816      	bhi.n	8000f64 <LCD_Change_Menu+0x40>
 8000f36:	a201      	add	r2, pc, #4	; (adr r2, 8000f3c <LCD_Change_Menu+0x18>)
 8000f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3c:	08000f4d 	.word	0x08000f4d
 8000f40:	08000f53 	.word	0x08000f53
 8000f44:	08000f59 	.word	0x08000f59
 8000f48:	08000f5f 	.word	0x08000f5f
	{
	case 1:
		Menu_Front();
 8000f4c:	f000 f92a 	bl	80011a4 <Menu_Front>
	break;
 8000f50:	e008      	b.n	8000f64 <LCD_Change_Menu+0x40>
	case 2:
		Menu_Set();
 8000f52:	f000 f93d 	bl	80011d0 <Menu_Set>
	break;
 8000f56:	e005      	b.n	8000f64 <LCD_Change_Menu+0x40>
	case 3:
		Menu_Set_DS();
 8000f58:	f000 f950 	bl	80011fc <Menu_Set_DS>
	break;
 8000f5c:	e002      	b.n	8000f64 <LCD_Change_Menu+0x40>
	case 4:
		Menu_Set_Freq();
 8000f5e:	f000 f963 	bl	8001228 <Menu_Set_Freq>
	break;
 8000f62:	bf00      	nop
	}
	pointer_pos = 1;
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <LCD_Change_Menu+0x54>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
	multiplier = 0;
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <LCD_Change_Menu+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200000c8 	.word	0x200000c8
 8000f78:	200000cc 	.word	0x200000cc
 8000f7c:	200000d0 	.word	0x200000d0

08000f80 <LCD_Update>:
static void LCD_Update(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	switch (menu)
 8000f84:	4b69      	ldr	r3, [pc, #420]	; (800112c <LCD_Update+0x1ac>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	f200 80cc 	bhi.w	8001128 <LCD_Update+0x1a8>
 8000f90:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <LCD_Update+0x18>)
 8000f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f96:	bf00      	nop
 8000f98:	08000fa9 	.word	0x08000fa9
 8000f9c:	08001067 	.word	0x08001067
 8000fa0:	080010d1 	.word	0x080010d1
 8000fa4:	080010fd 	.word	0x080010fd
	{
	case 1:
		LCD_Set_Cursor(1, 3);
 8000fa8:	2103      	movs	r1, #3
 8000faa:	2001      	movs	r0, #1
 8000fac:	f7ff fc07 	bl	80007be <LCD_Set_Cursor>
		LCD_Write_String("     ");
 8000fb0:	485f      	ldr	r0, [pc, #380]	; (8001130 <LCD_Update+0x1b0>)
 8000fb2:	f7ff fd99 	bl	8000ae8 <LCD_Write_String>
		LCD_Set_Cursor(2, 3);
 8000fb6:	2103      	movs	r1, #3
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f7ff fc00 	bl	80007be <LCD_Set_Cursor>
		LCD_Write_String("     ");
 8000fbe:	485c      	ldr	r0, [pc, #368]	; (8001130 <LCD_Update+0x1b0>)
 8000fc0:	f7ff fd92 	bl	8000ae8 <LCD_Write_String>
		sprintf(int_str_ds, "%d", ds);
 8000fc4:	4b5b      	ldr	r3, [pc, #364]	; (8001134 <LCD_Update+0x1b4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	495b      	ldr	r1, [pc, #364]	; (8001138 <LCD_Update+0x1b8>)
 8000fcc:	485b      	ldr	r0, [pc, #364]	; (800113c <LCD_Update+0x1bc>)
 8000fce:	f002 fb25 	bl	800361c <siprintf>
		LCD_Set_Cursor(1, 3);
 8000fd2:	2103      	movs	r1, #3
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff fbf2 	bl	80007be <LCD_Set_Cursor>
		LCD_Write_String(int_str_ds);
 8000fda:	4858      	ldr	r0, [pc, #352]	; (800113c <LCD_Update+0x1bc>)
 8000fdc:	f7ff fd84 	bl	8000ae8 <LCD_Write_String>
		sprintf(int_str_freq, "%d", freq);
 8000fe0:	4b57      	ldr	r3, [pc, #348]	; (8001140 <LCD_Update+0x1c0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4954      	ldr	r1, [pc, #336]	; (8001138 <LCD_Update+0x1b8>)
 8000fe8:	4856      	ldr	r0, [pc, #344]	; (8001144 <LCD_Update+0x1c4>)
 8000fea:	f002 fb17 	bl	800361c <siprintf>
		LCD_Set_Cursor(2, 3);
 8000fee:	2103      	movs	r1, #3
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	f7ff fbe4 	bl	80007be <LCD_Set_Cursor>
		LCD_Write_String(int_str_freq);
 8000ff6:	4853      	ldr	r0, [pc, #332]	; (8001144 <LCD_Update+0x1c4>)
 8000ff8:	f7ff fd76 	bl	8000ae8 <LCD_Write_String>
		if (LCDRefreshPWM == 1)
 8000ffc:	4b52      	ldr	r3, [pc, #328]	; (8001148 <LCD_Update+0x1c8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d10e      	bne.n	8001022 <LCD_Update+0xa2>
		{
			LCD_Set_Cursor(1, 14);
 8001004:	210e      	movs	r1, #14
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff fbd9 	bl	80007be <LCD_Set_Cursor>
			if (generate_pwm == 1)
 800100c:	4b4f      	ldr	r3, [pc, #316]	; (800114c <LCD_Update+0x1cc>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d103      	bne.n	800101c <LCD_Update+0x9c>
			{
				LCD_Write_String("ON ");
 8001014:	484e      	ldr	r0, [pc, #312]	; (8001150 <LCD_Update+0x1d0>)
 8001016:	f7ff fd67 	bl	8000ae8 <LCD_Write_String>
 800101a:	e002      	b.n	8001022 <LCD_Update+0xa2>
			}
			else
			{
				LCD_Write_String("OFF");
 800101c:	484d      	ldr	r0, [pc, #308]	; (8001154 <LCD_Update+0x1d4>)
 800101e:	f7ff fd63 	bl	8000ae8 <LCD_Write_String>
			}
		}
		if (pointer_pos == 1)
 8001022:	4b4d      	ldr	r3, [pc, #308]	; (8001158 <LCD_Update+0x1d8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d10e      	bne.n	8001048 <LCD_Update+0xc8>
		{
			LCD_Set_Cursor(2, 13);
 800102a:	210d      	movs	r1, #13
 800102c:	2002      	movs	r0, #2
 800102e:	f7ff fbc6 	bl	80007be <LCD_Set_Cursor>
			LCD_Write_Char(0xFE);
 8001032:	20fe      	movs	r0, #254	; 0xfe
 8001034:	f7ff fcfe 	bl	8000a34 <LCD_Write_Char>
			LCD_Set_Cursor(1, 13);
 8001038:	210d      	movs	r1, #13
 800103a:	2001      	movs	r0, #1
 800103c:	f7ff fbbf 	bl	80007be <LCD_Set_Cursor>
			LCD_Write_Char(0x7E);
 8001040:	207e      	movs	r0, #126	; 0x7e
 8001042:	f7ff fcf7 	bl	8000a34 <LCD_Write_Char>
			LCD_Set_Cursor(1, 13);
			LCD_Write_Char(0xFE);
			LCD_Set_Cursor(2, 13);
			LCD_Write_Char(0x7E);
		}
	break;
 8001046:	e06f      	b.n	8001128 <LCD_Update+0x1a8>
			LCD_Set_Cursor(1, 13);
 8001048:	210d      	movs	r1, #13
 800104a:	2001      	movs	r0, #1
 800104c:	f7ff fbb7 	bl	80007be <LCD_Set_Cursor>
			LCD_Write_Char(0xFE);
 8001050:	20fe      	movs	r0, #254	; 0xfe
 8001052:	f7ff fcef 	bl	8000a34 <LCD_Write_Char>
			LCD_Set_Cursor(2, 13);
 8001056:	210d      	movs	r1, #13
 8001058:	2002      	movs	r0, #2
 800105a:	f7ff fbb0 	bl	80007be <LCD_Set_Cursor>
			LCD_Write_Char(0x7E);
 800105e:	207e      	movs	r0, #126	; 0x7e
 8001060:	f7ff fce8 	bl	8000a34 <LCD_Write_Char>
	break;
 8001064:	e060      	b.n	8001128 <LCD_Update+0x1a8>
	case 2:
		LCD_Set_Cursor(1, 1);
 8001066:	2101      	movs	r1, #1
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff fba8 	bl	80007be <LCD_Set_Cursor>
		LCD_Write_Char(0xFE);
 800106e:	20fe      	movs	r0, #254	; 0xfe
 8001070:	f7ff fce0 	bl	8000a34 <LCD_Write_Char>
		LCD_Set_Cursor(2, 1);
 8001074:	2101      	movs	r1, #1
 8001076:	2002      	movs	r0, #2
 8001078:	f7ff fba1 	bl	80007be <LCD_Set_Cursor>
		LCD_Write_Char(0xFE);
 800107c:	20fe      	movs	r0, #254	; 0xfe
 800107e:	f7ff fcd9 	bl	8000a34 <LCD_Write_Char>
		LCD_Set_Cursor(1, 10);
 8001082:	210a      	movs	r1, #10
 8001084:	2001      	movs	r0, #1
 8001086:	f7ff fb9a 	bl	80007be <LCD_Set_Cursor>
		LCD_Write_Char(0xFE);
 800108a:	20fe      	movs	r0, #254	; 0xfe
 800108c:	f7ff fcd2 	bl	8000a34 <LCD_Write_Char>
		if(pointer_pos == 1)
 8001090:	4b31      	ldr	r3, [pc, #196]	; (8001158 <LCD_Update+0x1d8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d107      	bne.n	80010a8 <LCD_Update+0x128>
		{
			LCD_Set_Cursor(1, 1);
 8001098:	2101      	movs	r1, #1
 800109a:	2001      	movs	r0, #1
 800109c:	f7ff fb8f 	bl	80007be <LCD_Set_Cursor>
			LCD_Write_Char(0x7E);
 80010a0:	207e      	movs	r0, #126	; 0x7e
 80010a2:	f7ff fcc7 	bl	8000a34 <LCD_Write_Char>
		else
		{
			LCD_Set_Cursor(1, 10);
			LCD_Write_Char(0x7E);
		}
	break;
 80010a6:	e03f      	b.n	8001128 <LCD_Update+0x1a8>
		else if(pointer_pos == 2)
 80010a8:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <LCD_Update+0x1d8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d107      	bne.n	80010c0 <LCD_Update+0x140>
			LCD_Set_Cursor(2, 1);
 80010b0:	2101      	movs	r1, #1
 80010b2:	2002      	movs	r0, #2
 80010b4:	f7ff fb83 	bl	80007be <LCD_Set_Cursor>
			LCD_Write_Char(0x7E);
 80010b8:	207e      	movs	r0, #126	; 0x7e
 80010ba:	f7ff fcbb 	bl	8000a34 <LCD_Write_Char>
	break;
 80010be:	e033      	b.n	8001128 <LCD_Update+0x1a8>
			LCD_Set_Cursor(1, 10);
 80010c0:	210a      	movs	r1, #10
 80010c2:	2001      	movs	r0, #1
 80010c4:	f7ff fb7b 	bl	80007be <LCD_Set_Cursor>
			LCD_Write_Char(0x7E);
 80010c8:	207e      	movs	r0, #126	; 0x7e
 80010ca:	f7ff fcb3 	bl	8000a34 <LCD_Write_Char>
	break;
 80010ce:	e02b      	b.n	8001128 <LCD_Update+0x1a8>
	case 3:
		sprintf(int_str_ds, "%d", ds);
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <LCD_Update+0x1b4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4918      	ldr	r1, [pc, #96]	; (8001138 <LCD_Update+0x1b8>)
 80010d8:	4818      	ldr	r0, [pc, #96]	; (800113c <LCD_Update+0x1bc>)
 80010da:	f002 fa9f 	bl	800361c <siprintf>
		LCD_Set_Cursor(2, 1);
 80010de:	2101      	movs	r1, #1
 80010e0:	2002      	movs	r0, #2
 80010e2:	f7ff fb6c 	bl	80007be <LCD_Set_Cursor>
		LCD_Write_String("   ");
 80010e6:	481d      	ldr	r0, [pc, #116]	; (800115c <LCD_Update+0x1dc>)
 80010e8:	f7ff fcfe 	bl	8000ae8 <LCD_Write_String>
		LCD_Set_Cursor(2, 1);
 80010ec:	2101      	movs	r1, #1
 80010ee:	2002      	movs	r0, #2
 80010f0:	f7ff fb65 	bl	80007be <LCD_Set_Cursor>
		LCD_Write_String(int_str_ds);
 80010f4:	4811      	ldr	r0, [pc, #68]	; (800113c <LCD_Update+0x1bc>)
 80010f6:	f7ff fcf7 	bl	8000ae8 <LCD_Write_String>
	break;
 80010fa:	e015      	b.n	8001128 <LCD_Update+0x1a8>
	case 4:
		sprintf(int_str_freq, "%d", freq);
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <LCD_Update+0x1c0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	490d      	ldr	r1, [pc, #52]	; (8001138 <LCD_Update+0x1b8>)
 8001104:	480f      	ldr	r0, [pc, #60]	; (8001144 <LCD_Update+0x1c4>)
 8001106:	f002 fa89 	bl	800361c <siprintf>
		LCD_Set_Cursor(2, 1);
 800110a:	2101      	movs	r1, #1
 800110c:	2002      	movs	r0, #2
 800110e:	f7ff fb56 	bl	80007be <LCD_Set_Cursor>
		LCD_Write_String("     ");
 8001112:	4807      	ldr	r0, [pc, #28]	; (8001130 <LCD_Update+0x1b0>)
 8001114:	f7ff fce8 	bl	8000ae8 <LCD_Write_String>
		LCD_Set_Cursor(2, 1);
 8001118:	2101      	movs	r1, #1
 800111a:	2002      	movs	r0, #2
 800111c:	f7ff fb4f 	bl	80007be <LCD_Set_Cursor>
		LCD_Write_String(int_str_freq);
 8001120:	4808      	ldr	r0, [pc, #32]	; (8001144 <LCD_Update+0x1c4>)
 8001122:	f7ff fce1 	bl	8000ae8 <LCD_Write_String>
	break;
 8001126:	bf00      	nop
	}
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200000c8 	.word	0x200000c8
 8001130:	08003f7c 	.word	0x08003f7c
 8001134:	200000c0 	.word	0x200000c0
 8001138:	08003f84 	.word	0x08003f84
 800113c:	200000d8 	.word	0x200000d8
 8001140:	200000c4 	.word	0x200000c4
 8001144:	200000dc 	.word	0x200000dc
 8001148:	200000ec 	.word	0x200000ec
 800114c:	200000d4 	.word	0x200000d4
 8001150:	08003f88 	.word	0x08003f88
 8001154:	08003f8c 	.word	0x08003f8c
 8001158:	200000cc 	.word	0x200000cc
 800115c:	08003f90 	.word	0x08003f90

08001160 <LCD_Update_Mul>:
static void LCD_Update_Mul(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	if (menu == 3 || menu == 4)
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <LCD_Update_Mul+0x38>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b03      	cmp	r3, #3
 800116a:	d003      	beq.n	8001174 <LCD_Update_Mul+0x14>
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <LCD_Update_Mul+0x38>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b04      	cmp	r3, #4
 8001172:	d10f      	bne.n	8001194 <LCD_Update_Mul+0x34>
	{
		int_str_mul = multiplier + '0';
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <LCD_Update_Mul+0x3c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	3330      	adds	r3, #48	; 0x30
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <LCD_Update_Mul+0x40>)
 8001180:	701a      	strb	r2, [r3, #0]
		LCD_Set_Cursor(1, 16);
 8001182:	2110      	movs	r1, #16
 8001184:	2001      	movs	r0, #1
 8001186:	f7ff fb1a 	bl	80007be <LCD_Set_Cursor>
		LCD_Write_Char(int_str_mul);
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <LCD_Update_Mul+0x40>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fc50 	bl	8000a34 <LCD_Write_Char>
	}
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200000c8 	.word	0x200000c8
 800119c:	200000d0 	.word	0x200000d0
 80011a0:	200000e1 	.word	0x200000e1

080011a4 <Menu_Front>:
static void Menu_Front(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	LCD_Set_Cursor(1, 1);
 80011a8:	2101      	movs	r1, #1
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff fb07 	bl	80007be <LCD_Set_Cursor>
	LCD_Write_String("D        %      ");
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <Menu_Front+0x24>)
 80011b2:	f7ff fc99 	bl	8000ae8 <LCD_Write_String>
	LCD_Set_Cursor(2, 1);
 80011b6:	2101      	movs	r1, #1
 80011b8:	2002      	movs	r0, #2
 80011ba:	f7ff fb00 	bl	80007be <LCD_Set_Cursor>
	LCD_Write_String("F        Hz  SET");
 80011be:	4803      	ldr	r0, [pc, #12]	; (80011cc <Menu_Front+0x28>)
 80011c0:	f7ff fc92 	bl	8000ae8 <LCD_Write_String>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	08003f94 	.word	0x08003f94
 80011cc:	08003fa8 	.word	0x08003fa8

080011d0 <Menu_Set>:
static void Menu_Set(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	LCD_Set_Cursor(1, 1);
 80011d4:	2101      	movs	r1, #1
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff faf1 	bl	80007be <LCD_Set_Cursor>
	LCD_Write_String(" DS       Return");
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <Menu_Set+0x24>)
 80011de:	f7ff fc83 	bl	8000ae8 <LCD_Write_String>
	LCD_Set_Cursor(2, 1);
 80011e2:	2101      	movs	r1, #1
 80011e4:	2002      	movs	r0, #2
 80011e6:	f7ff faea 	bl	80007be <LCD_Set_Cursor>
	LCD_Write_String(" Freq           ");
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <Menu_Set+0x28>)
 80011ec:	f7ff fc7c 	bl	8000ae8 <LCD_Write_String>
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	08003fbc 	.word	0x08003fbc
 80011f8:	08003fd0 	.word	0x08003fd0

080011fc <Menu_Set_DS>:
static void Menu_Set_DS(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	LCD_Set_Cursor(1, 1);
 8001200:	2101      	movs	r1, #1
 8001202:	2001      	movs	r0, #1
 8001204:	f7ff fadb 	bl	80007be <LCD_Set_Cursor>
	LCD_Write_String("Duty Cycle    M ");
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <Menu_Set_DS+0x24>)
 800120a:	f7ff fc6d 	bl	8000ae8 <LCD_Write_String>
	LCD_Set_Cursor(2, 1);
 800120e:	2101      	movs	r1, #1
 8001210:	2002      	movs	r0, #2
 8001212:	f7ff fad4 	bl	80007be <LCD_Set_Cursor>
	LCD_Write_String("               %");
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <Menu_Set_DS+0x28>)
 8001218:	f7ff fc66 	bl	8000ae8 <LCD_Write_String>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	08003fe4 	.word	0x08003fe4
 8001224:	08003ff8 	.word	0x08003ff8

08001228 <Menu_Set_Freq>:
static void Menu_Set_Freq(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	LCD_Set_Cursor(1, 1);
 800122c:	2101      	movs	r1, #1
 800122e:	2001      	movs	r0, #1
 8001230:	f7ff fac5 	bl	80007be <LCD_Set_Cursor>
	LCD_Write_String("Frequency     M ");
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <Menu_Set_Freq+0x24>)
 8001236:	f7ff fc57 	bl	8000ae8 <LCD_Write_String>
	LCD_Set_Cursor(2, 1);
 800123a:	2101      	movs	r1, #1
 800123c:	2002      	movs	r0, #2
 800123e:	f7ff fabe 	bl	80007be <LCD_Set_Cursor>
	LCD_Write_String("              Hz");
 8001242:	4803      	ldr	r0, [pc, #12]	; (8001250 <Menu_Set_Freq+0x28>)
 8001244:	f7ff fc50 	bl	8000ae8 <LCD_Write_String>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	0800400c 	.word	0x0800400c
 8001250:	08004020 	.word	0x08004020

08001254 <PWM_Calc>:
static void PWM_Calc(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
	if (freq > 0)
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <PWM_Calc+0x58>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	dd20      	ble.n	80012a2 <PWM_Calc+0x4e>
	{
		//TIM2->ARR = 84004200 - (4200 * freq);
		TIM2->PSC = (60000 / freq) - 1;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <PWM_Calc+0x58>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001268:	fb92 f3f3 	sdiv	r3, r2, r3
 800126c:	1e5a      	subs	r2, r3, #1
 800126e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
		if (ds != 0 && ds != 100)
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <PWM_Calc+0x5c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d012      	beq.n	80012a2 <PWM_Calc+0x4e>
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <PWM_Calc+0x5c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b64      	cmp	r3, #100	; 0x64
 8001282:	d00e      	beq.n	80012a2 <PWM_Calc+0x4e>
		{
//			TIM2->CCR1 = (TIM2->ARR / 100) * ds;
			TIM2->CCR1 = (TIM2->ARR / 100) * ds;
 8001284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <PWM_Calc+0x60>)
 800128c:	fba2 2303 	umull	r2, r3, r2, r3
 8001290:	095b      	lsrs	r3, r3, #5
 8001292:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <PWM_Calc+0x5c>)
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	4611      	mov	r1, r2
 8001298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129c:	fb01 f303 	mul.w	r3, r1, r3
 80012a0:	6353      	str	r3, [r2, #52]	; 0x34
		}
	}
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	200000c4 	.word	0x200000c4
 80012b0:	200000c0 	.word	0x200000c0
 80012b4:	51eb851f 	.word	0x51eb851f

080012b8 <PWM_Gen>:
static void PWM_Gen(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	if (ds == 100 || freq == 0)
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <PWM_Gen+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b64      	cmp	r3, #100	; 0x64
 80012c2:	d003      	beq.n	80012cc <PWM_Gen+0x14>
 80012c4:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <PWM_Gen+0x44>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d105      	bne.n	80012d8 <PWM_Gen+0x20>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2120      	movs	r1, #32
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <PWM_Gen+0x48>)
 80012d2:	f000 fec1 	bl	8002058 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
	}
}
 80012d6:	e00d      	b.n	80012f4 <PWM_Gen+0x3c>
	else if (ds == 0)
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <PWM_Gen+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d105      	bne.n	80012ec <PWM_Gen+0x34>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80012e0:	2201      	movs	r2, #1
 80012e2:	2120      	movs	r1, #32
 80012e4:	4806      	ldr	r0, [pc, #24]	; (8001300 <PWM_Gen+0x48>)
 80012e6:	f000 feb7 	bl	8002058 <HAL_GPIO_WritePin>
}
 80012ea:	e003      	b.n	80012f4 <PWM_Gen+0x3c>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012ec:	2100      	movs	r1, #0
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <PWM_Gen+0x4c>)
 80012f0:	f001 fbbc 	bl	8002a6c <HAL_TIM_PWM_Start>
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200000c0 	.word	0x200000c0
 80012fc:	200000c4 	.word	0x200000c4
 8001300:	40020000 	.word	0x40020000
 8001304:	20000078 	.word	0x20000078

08001308 <PWM_Stop>:
static void PWM_Stop(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800130c:	2100      	movs	r1, #0
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <PWM_Stop+0x1c>)
 8001310:	f001 fc5c 	bl	8002bcc <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2120      	movs	r1, #32
 8001318:	4803      	ldr	r0, [pc, #12]	; (8001328 <PWM_Stop+0x20>)
 800131a:	f000 fe9d 	bl	8002058 <HAL_GPIO_WritePin>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000078 	.word	0x20000078
 8001328:	40020000 	.word	0x40020000

0800132c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_1)
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	2b02      	cmp	r3, #2
 800133a:	f040 8188 	bne.w	800164e <HAL_GPIO_EXTI_Callback+0x322>
    {
    	switch(menu)
 800133e:	4b8b      	ldr	r3, [pc, #556]	; (800156c <HAL_GPIO_EXTI_Callback+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	2b03      	cmp	r3, #3
 8001346:	f200 817e 	bhi.w	8001646 <HAL_GPIO_EXTI_Callback+0x31a>
 800134a:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <HAL_GPIO_EXTI_Callback+0x24>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	08001361 	.word	0x08001361
 8001354:	08001379 	.word	0x08001379
 8001358:	080013bf 	.word	0x080013bf
 800135c:	0800147f 	.word	0x0800147f
    	{
    	case 1:
    			if (pointer_pos == 1)
 8001360:	4b83      	ldr	r3, [pc, #524]	; (8001570 <HAL_GPIO_EXTI_Callback+0x244>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d103      	bne.n	8001370 <HAL_GPIO_EXTI_Callback+0x44>
    			{
    				pointer_pos = 2;
 8001368:	4b81      	ldr	r3, [pc, #516]	; (8001570 <HAL_GPIO_EXTI_Callback+0x244>)
 800136a:	2202      	movs	r2, #2
 800136c:	601a      	str	r2, [r3, #0]
    			}
    			else
    			{
    				pointer_pos = 1;
    			}
    	break;
 800136e:	e16a      	b.n	8001646 <HAL_GPIO_EXTI_Callback+0x31a>
    				pointer_pos = 1;
 8001370:	4b7f      	ldr	r3, [pc, #508]	; (8001570 <HAL_GPIO_EXTI_Callback+0x244>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]
    	break;
 8001376:	e166      	b.n	8001646 <HAL_GPIO_EXTI_Callback+0x31a>
    	case 2:
    			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 0)
 8001378:	2104      	movs	r1, #4
 800137a:	487e      	ldr	r0, [pc, #504]	; (8001574 <HAL_GPIO_EXTI_Callback+0x248>)
 800137c:	f000 fe54 	bl	8002028 <HAL_GPIO_ReadPin>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10d      	bne.n	80013a2 <HAL_GPIO_EXTI_Callback+0x76>
    			{
    				if (pointer_pos < 3)
 8001386:	4b7a      	ldr	r3, [pc, #488]	; (8001570 <HAL_GPIO_EXTI_Callback+0x244>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b02      	cmp	r3, #2
 800138c:	dc05      	bgt.n	800139a <HAL_GPIO_EXTI_Callback+0x6e>
    				{
    					pointer_pos++;
 800138e:	4b78      	ldr	r3, [pc, #480]	; (8001570 <HAL_GPIO_EXTI_Callback+0x244>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	4a76      	ldr	r2, [pc, #472]	; (8001570 <HAL_GPIO_EXTI_Callback+0x244>)
 8001396:	6013      	str	r3, [r2, #0]
    				else
    				{
    					pointer_pos = 3;
    				}
    			}
    	break;
 8001398:	e155      	b.n	8001646 <HAL_GPIO_EXTI_Callback+0x31a>
    					pointer_pos = 1;
 800139a:	4b75      	ldr	r3, [pc, #468]	; (8001570 <HAL_GPIO_EXTI_Callback+0x244>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]
    	break;
 80013a0:	e151      	b.n	8001646 <HAL_GPIO_EXTI_Callback+0x31a>
    				if (pointer_pos > 1 )
 80013a2:	4b73      	ldr	r3, [pc, #460]	; (8001570 <HAL_GPIO_EXTI_Callback+0x244>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	dd05      	ble.n	80013b6 <HAL_GPIO_EXTI_Callback+0x8a>
    					pointer_pos--;
 80013aa:	4b71      	ldr	r3, [pc, #452]	; (8001570 <HAL_GPIO_EXTI_Callback+0x244>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	4a6f      	ldr	r2, [pc, #444]	; (8001570 <HAL_GPIO_EXTI_Callback+0x244>)
 80013b2:	6013      	str	r3, [r2, #0]
    	break;
 80013b4:	e147      	b.n	8001646 <HAL_GPIO_EXTI_Callback+0x31a>
    					pointer_pos = 3;
 80013b6:	4b6e      	ldr	r3, [pc, #440]	; (8001570 <HAL_GPIO_EXTI_Callback+0x244>)
 80013b8:	2203      	movs	r2, #3
 80013ba:	601a      	str	r2, [r3, #0]
    	break;
 80013bc:	e143      	b.n	8001646 <HAL_GPIO_EXTI_Callback+0x31a>
    	case 3:
    			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 0)
 80013be:	2104      	movs	r1, #4
 80013c0:	486c      	ldr	r0, [pc, #432]	; (8001574 <HAL_GPIO_EXTI_Callback+0x248>)
 80013c2:	f000 fe31 	bl	8002028 <HAL_GPIO_ReadPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d127      	bne.n	800141c <HAL_GPIO_EXTI_Callback+0xf0>
    			{
    				if (ds < 100)
 80013cc:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b63      	cmp	r3, #99	; 0x63
 80013d2:	dc1f      	bgt.n	8001414 <HAL_GPIO_EXTI_Callback+0xe8>
    				{
    					if(multiplier == 1 && ds <= 90)
 80013d4:	4b69      	ldr	r3, [pc, #420]	; (800157c <HAL_GPIO_EXTI_Callback+0x250>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d109      	bne.n	80013f0 <HAL_GPIO_EXTI_Callback+0xc4>
 80013dc:	4b66      	ldr	r3, [pc, #408]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b5a      	cmp	r3, #90	; 0x5a
 80013e2:	dc05      	bgt.n	80013f0 <HAL_GPIO_EXTI_Callback+0xc4>
    					{
    						ds = ds + 10;
 80013e4:	4b64      	ldr	r3, [pc, #400]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	330a      	adds	r3, #10
 80013ea:	4a63      	ldr	r2, [pc, #396]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e045      	b.n	800147c <HAL_GPIO_EXTI_Callback+0x150>
    					}
    					else if (multiplier == 1 && ds > 90)
 80013f0:	4b62      	ldr	r3, [pc, #392]	; (800157c <HAL_GPIO_EXTI_Callback+0x250>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d107      	bne.n	8001408 <HAL_GPIO_EXTI_Callback+0xdc>
 80013f8:	4b5f      	ldr	r3, [pc, #380]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b5a      	cmp	r3, #90	; 0x5a
 80013fe:	dd03      	ble.n	8001408 <HAL_GPIO_EXTI_Callback+0xdc>
    					{
    						ds = 100;
 8001400:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 8001402:	2264      	movs	r2, #100	; 0x64
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	e039      	b.n	800147c <HAL_GPIO_EXTI_Callback+0x150>
    					}
    					else
    					{
    						ds++;
 8001408:	4b5b      	ldr	r3, [pc, #364]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	4a5a      	ldr	r2, [pc, #360]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 8001410:	6013      	str	r3, [r2, #0]
    				else
    				{
    					ds = 0;
    				}
    			}
    	break;
 8001412:	e117      	b.n	8001644 <HAL_GPIO_EXTI_Callback+0x318>
    					ds = 100;
 8001414:	4b58      	ldr	r3, [pc, #352]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 8001416:	2264      	movs	r2, #100	; 0x64
 8001418:	601a      	str	r2, [r3, #0]
    	break;
 800141a:	e113      	b.n	8001644 <HAL_GPIO_EXTI_Callback+0x318>
    			else if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1))
 800141c:	2104      	movs	r1, #4
 800141e:	4855      	ldr	r0, [pc, #340]	; (8001574 <HAL_GPIO_EXTI_Callback+0x248>)
 8001420:	f000 fe02 	bl	8002028 <HAL_GPIO_ReadPin>
 8001424:	4603      	mov	r3, r0
 8001426:	2b01      	cmp	r3, #1
 8001428:	f040 810c 	bne.w	8001644 <HAL_GPIO_EXTI_Callback+0x318>
    				if (ds > 0)
 800142c:	4b52      	ldr	r3, [pc, #328]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	dd1f      	ble.n	8001474 <HAL_GPIO_EXTI_Callback+0x148>
    					if(multiplier == 1 && ds >= 10)
 8001434:	4b51      	ldr	r3, [pc, #324]	; (800157c <HAL_GPIO_EXTI_Callback+0x250>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d109      	bne.n	8001450 <HAL_GPIO_EXTI_Callback+0x124>
 800143c:	4b4e      	ldr	r3, [pc, #312]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b09      	cmp	r3, #9
 8001442:	dd05      	ble.n	8001450 <HAL_GPIO_EXTI_Callback+0x124>
    						ds = ds - 10;
 8001444:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3b0a      	subs	r3, #10
 800144a:	4a4b      	ldr	r2, [pc, #300]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	e015      	b.n	800147c <HAL_GPIO_EXTI_Callback+0x150>
    					else if (multiplier == 1 && ds < 10)
 8001450:	4b4a      	ldr	r3, [pc, #296]	; (800157c <HAL_GPIO_EXTI_Callback+0x250>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d107      	bne.n	8001468 <HAL_GPIO_EXTI_Callback+0x13c>
 8001458:	4b47      	ldr	r3, [pc, #284]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b09      	cmp	r3, #9
 800145e:	dc03      	bgt.n	8001468 <HAL_GPIO_EXTI_Callback+0x13c>
    						ds = 0;
 8001460:	4b45      	ldr	r3, [pc, #276]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	e009      	b.n	800147c <HAL_GPIO_EXTI_Callback+0x150>
    						ds--;
 8001468:	4b43      	ldr	r3, [pc, #268]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	3b01      	subs	r3, #1
 800146e:	4a42      	ldr	r2, [pc, #264]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 8001470:	6013      	str	r3, [r2, #0]
    	break;
 8001472:	e0e7      	b.n	8001644 <HAL_GPIO_EXTI_Callback+0x318>
    					ds = 0;
 8001474:	4b40      	ldr	r3, [pc, #256]	; (8001578 <HAL_GPIO_EXTI_Callback+0x24c>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
    	break;
 800147a:	e0e3      	b.n	8001644 <HAL_GPIO_EXTI_Callback+0x318>
 800147c:	e0e2      	b.n	8001644 <HAL_GPIO_EXTI_Callback+0x318>
    	case 4:
    			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 0)
 800147e:	2104      	movs	r1, #4
 8001480:	483c      	ldr	r0, [pc, #240]	; (8001574 <HAL_GPIO_EXTI_Callback+0x248>)
 8001482:	f000 fdd1 	bl	8002028 <HAL_GPIO_ReadPin>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d17b      	bne.n	8001584 <HAL_GPIO_EXTI_Callback+0x258>
    			{
    				if (freq < 20000)
 800148c:	4b3c      	ldr	r3, [pc, #240]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001494:	4293      	cmp	r3, r2
 8001496:	dc63      	bgt.n	8001560 <HAL_GPIO_EXTI_Callback+0x234>
    				{
    					if(multiplier == 1 && freq <= 19990)
 8001498:	4b38      	ldr	r3, [pc, #224]	; (800157c <HAL_GPIO_EXTI_Callback+0x250>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d10b      	bne.n	80014b8 <HAL_GPIO_EXTI_Callback+0x18c>
 80014a0:	4b37      	ldr	r3, [pc, #220]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f644 6216 	movw	r2, #19990	; 0x4e16
 80014a8:	4293      	cmp	r3, r2
 80014aa:	dc05      	bgt.n	80014b8 <HAL_GPIO_EXTI_Callback+0x18c>
    					{
    						freq = freq + 10;
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	330a      	adds	r3, #10
 80014b2:	4a33      	ldr	r2, [pc, #204]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e0c4      	b.n	8001642 <HAL_GPIO_EXTI_Callback+0x316>
    					}
    					else if (multiplier == 1 && freq > 19990)
 80014b8:	4b30      	ldr	r3, [pc, #192]	; (800157c <HAL_GPIO_EXTI_Callback+0x250>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d10a      	bne.n	80014d6 <HAL_GPIO_EXTI_Callback+0x1aa>
 80014c0:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f644 6216 	movw	r2, #19990	; 0x4e16
 80014c8:	4293      	cmp	r3, r2
 80014ca:	dd04      	ble.n	80014d6 <HAL_GPIO_EXTI_Callback+0x1aa>
    					{
    						freq = 20000;
 80014cc:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 80014ce:	f644 6220 	movw	r2, #20000	; 0x4e20
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e0b5      	b.n	8001642 <HAL_GPIO_EXTI_Callback+0x316>
    					}
    					else if (multiplier == 2 && freq <= 19900)
 80014d6:	4b29      	ldr	r3, [pc, #164]	; (800157c <HAL_GPIO_EXTI_Callback+0x250>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d10b      	bne.n	80014f6 <HAL_GPIO_EXTI_Callback+0x1ca>
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f644 52bc 	movw	r2, #19900	; 0x4dbc
 80014e6:	4293      	cmp	r3, r2
 80014e8:	dc05      	bgt.n	80014f6 <HAL_GPIO_EXTI_Callback+0x1ca>
    					{
    						freq = freq + 100;
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3364      	adds	r3, #100	; 0x64
 80014f0:	4a23      	ldr	r2, [pc, #140]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	e0a5      	b.n	8001642 <HAL_GPIO_EXTI_Callback+0x316>
    					}
    					else if (multiplier == 2 && freq > 19900)
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_GPIO_EXTI_Callback+0x250>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d10a      	bne.n	8001514 <HAL_GPIO_EXTI_Callback+0x1e8>
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f644 52bc 	movw	r2, #19900	; 0x4dbc
 8001506:	4293      	cmp	r3, r2
 8001508:	dd04      	ble.n	8001514 <HAL_GPIO_EXTI_Callback+0x1e8>
    					{
    						freq = 20000;
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 800150c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	e096      	b.n	8001642 <HAL_GPIO_EXTI_Callback+0x316>
    					}
    					else if (multiplier == 3 && freq <= 19000)
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_GPIO_EXTI_Callback+0x250>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b03      	cmp	r3, #3
 800151a:	d10c      	bne.n	8001536 <HAL_GPIO_EXTI_Callback+0x20a>
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f644 2238 	movw	r2, #19000	; 0x4a38
 8001524:	4293      	cmp	r3, r2
 8001526:	dc06      	bgt.n	8001536 <HAL_GPIO_EXTI_Callback+0x20a>
    					{
    						freq = freq + 1000;
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001530:	4a13      	ldr	r2, [pc, #76]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	e085      	b.n	8001642 <HAL_GPIO_EXTI_Callback+0x316>
    					}
    					else if (multiplier == 3 && freq > 19000)
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_GPIO_EXTI_Callback+0x250>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b03      	cmp	r3, #3
 800153c:	d10a      	bne.n	8001554 <HAL_GPIO_EXTI_Callback+0x228>
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f644 2238 	movw	r2, #19000	; 0x4a38
 8001546:	4293      	cmp	r3, r2
 8001548:	dd04      	ble.n	8001554 <HAL_GPIO_EXTI_Callback+0x228>
    					{
    						freq = 20000;
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 800154c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	e076      	b.n	8001642 <HAL_GPIO_EXTI_Callback+0x316>
    					}
    					else
    					{
    						freq++;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	4a09      	ldr	r2, [pc, #36]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 800155c:	6013      	str	r3, [r2, #0]
    				else
    				{
    					freq = 0;
    				}
    			}
    	break;
 800155e:	e072      	b.n	8001646 <HAL_GPIO_EXTI_Callback+0x31a>
    					freq = 20000;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <HAL_GPIO_EXTI_Callback+0x254>)
 8001562:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001566:	601a      	str	r2, [r3, #0]
    	break;
 8001568:	e06d      	b.n	8001646 <HAL_GPIO_EXTI_Callback+0x31a>
 800156a:	bf00      	nop
 800156c:	200000c8 	.word	0x200000c8
 8001570:	200000cc 	.word	0x200000cc
 8001574:	40020400 	.word	0x40020400
 8001578:	200000c0 	.word	0x200000c0
 800157c:	200000d0 	.word	0x200000d0
 8001580:	200000c4 	.word	0x200000c4
    				if (freq > 0)
 8001584:	4b7e      	ldr	r3, [pc, #504]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	dd56      	ble.n	800163a <HAL_GPIO_EXTI_Callback+0x30e>
    					if(multiplier == 1 && freq >= 10)
 800158c:	4b7d      	ldr	r3, [pc, #500]	; (8001784 <HAL_GPIO_EXTI_Callback+0x458>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d109      	bne.n	80015a8 <HAL_GPIO_EXTI_Callback+0x27c>
 8001594:	4b7a      	ldr	r3, [pc, #488]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b09      	cmp	r3, #9
 800159a:	dd05      	ble.n	80015a8 <HAL_GPIO_EXTI_Callback+0x27c>
    						freq = freq - 10;
 800159c:	4b78      	ldr	r3, [pc, #480]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3b0a      	subs	r3, #10
 80015a2:	4a77      	ldr	r2, [pc, #476]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e04c      	b.n	8001642 <HAL_GPIO_EXTI_Callback+0x316>
    					else if (multiplier == 1 && freq < 10)
 80015a8:	4b76      	ldr	r3, [pc, #472]	; (8001784 <HAL_GPIO_EXTI_Callback+0x458>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d107      	bne.n	80015c0 <HAL_GPIO_EXTI_Callback+0x294>
 80015b0:	4b73      	ldr	r3, [pc, #460]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b09      	cmp	r3, #9
 80015b6:	dc03      	bgt.n	80015c0 <HAL_GPIO_EXTI_Callback+0x294>
    						freq = 0;
 80015b8:	4b71      	ldr	r3, [pc, #452]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	e040      	b.n	8001642 <HAL_GPIO_EXTI_Callback+0x316>
    					else if (multiplier == 2 && freq >= 100)
 80015c0:	4b70      	ldr	r3, [pc, #448]	; (8001784 <HAL_GPIO_EXTI_Callback+0x458>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d109      	bne.n	80015dc <HAL_GPIO_EXTI_Callback+0x2b0>
 80015c8:	4b6d      	ldr	r3, [pc, #436]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b63      	cmp	r3, #99	; 0x63
 80015ce:	dd05      	ble.n	80015dc <HAL_GPIO_EXTI_Callback+0x2b0>
    						freq = freq - 100;
 80015d0:	4b6b      	ldr	r3, [pc, #428]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	3b64      	subs	r3, #100	; 0x64
 80015d6:	4a6a      	ldr	r2, [pc, #424]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e032      	b.n	8001642 <HAL_GPIO_EXTI_Callback+0x316>
    					else if (multiplier == 2 && freq < 100)
 80015dc:	4b69      	ldr	r3, [pc, #420]	; (8001784 <HAL_GPIO_EXTI_Callback+0x458>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d107      	bne.n	80015f4 <HAL_GPIO_EXTI_Callback+0x2c8>
 80015e4:	4b66      	ldr	r3, [pc, #408]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b63      	cmp	r3, #99	; 0x63
 80015ea:	dc03      	bgt.n	80015f4 <HAL_GPIO_EXTI_Callback+0x2c8>
    						freq = 0;
 80015ec:	4b64      	ldr	r3, [pc, #400]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e026      	b.n	8001642 <HAL_GPIO_EXTI_Callback+0x316>
    					else if (multiplier == 3 && freq >= 1000)
 80015f4:	4b63      	ldr	r3, [pc, #396]	; (8001784 <HAL_GPIO_EXTI_Callback+0x458>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d10b      	bne.n	8001614 <HAL_GPIO_EXTI_Callback+0x2e8>
 80015fc:	4b60      	ldr	r3, [pc, #384]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001604:	db06      	blt.n	8001614 <HAL_GPIO_EXTI_Callback+0x2e8>
    						freq = freq - 1000;
 8001606:	4b5e      	ldr	r3, [pc, #376]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800160e:	4a5c      	ldr	r2, [pc, #368]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e016      	b.n	8001642 <HAL_GPIO_EXTI_Callback+0x316>
    					else if (multiplier == 3 && freq < 1000)
 8001614:	4b5b      	ldr	r3, [pc, #364]	; (8001784 <HAL_GPIO_EXTI_Callback+0x458>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d108      	bne.n	800162e <HAL_GPIO_EXTI_Callback+0x302>
 800161c:	4b58      	ldr	r3, [pc, #352]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001624:	da03      	bge.n	800162e <HAL_GPIO_EXTI_Callback+0x302>
    						freq = 0;
 8001626:	4b56      	ldr	r3, [pc, #344]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	e009      	b.n	8001642 <HAL_GPIO_EXTI_Callback+0x316>
    						freq--;
 800162e:	4b54      	ldr	r3, [pc, #336]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3b01      	subs	r3, #1
 8001634:	4a52      	ldr	r2, [pc, #328]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 8001636:	6013      	str	r3, [r2, #0]
    	break;
 8001638:	e005      	b.n	8001646 <HAL_GPIO_EXTI_Callback+0x31a>
    					freq = 0;
 800163a:	4b51      	ldr	r3, [pc, #324]	; (8001780 <HAL_GPIO_EXTI_Callback+0x454>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
    	break;
 8001640:	e001      	b.n	8001646 <HAL_GPIO_EXTI_Callback+0x31a>
 8001642:	e000      	b.n	8001646 <HAL_GPIO_EXTI_Callback+0x31a>
    	break;
 8001644:	bf00      	nop
    	}
    	LCDRefresh = 1;
 8001646:	4b50      	ldr	r3, [pc, #320]	; (8001788 <HAL_GPIO_EXTI_Callback+0x45c>)
 8001648:	2201      	movs	r2, #1
 800164a:	601a      	str	r2, [r3, #0]
    	else
    	{
    		multiplier = 0;
    	}
    }
}
 800164c:	e093      	b.n	8001776 <HAL_GPIO_EXTI_Callback+0x44a>
    else if (GPIO_Pin == GPIO_PIN_12)
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001654:	d160      	bne.n	8001718 <HAL_GPIO_EXTI_Callback+0x3ec>
    	switch(menu)
 8001656:	4b4d      	ldr	r3, [pc, #308]	; (800178c <HAL_GPIO_EXTI_Callback+0x460>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	3b01      	subs	r3, #1
 800165c:	2b03      	cmp	r3, #3
 800165e:	d857      	bhi.n	8001710 <HAL_GPIO_EXTI_Callback+0x3e4>
 8001660:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <HAL_GPIO_EXTI_Callback+0x33c>)
 8001662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001666:	bf00      	nop
 8001668:	08001679 	.word	0x08001679
 800166c:	080016a9 	.word	0x080016a9
 8001670:	080016f5 	.word	0x080016f5
 8001674:	08001703 	.word	0x08001703
    		if (pointer_pos == 1)
 8001678:	4b45      	ldr	r3, [pc, #276]	; (8001790 <HAL_GPIO_EXTI_Callback+0x464>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d10c      	bne.n	800169a <HAL_GPIO_EXTI_Callback+0x36e>
    			generate_pwm ^= 1;
 8001680:	4b44      	ldr	r3, [pc, #272]	; (8001794 <HAL_GPIO_EXTI_Callback+0x468>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f083 0301 	eor.w	r3, r3, #1
 8001688:	4a42      	ldr	r2, [pc, #264]	; (8001794 <HAL_GPIO_EXTI_Callback+0x468>)
 800168a:	6013      	str	r3, [r2, #0]
    			LCDRefreshPWM = 1;
 800168c:	4b42      	ldr	r3, [pc, #264]	; (8001798 <HAL_GPIO_EXTI_Callback+0x46c>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]
    			PWMToggle = 1;
 8001692:	4b42      	ldr	r3, [pc, #264]	; (800179c <HAL_GPIO_EXTI_Callback+0x470>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]
    	break;
 8001698:	e03a      	b.n	8001710 <HAL_GPIO_EXTI_Callback+0x3e4>
    			menu = 2;
 800169a:	4b3c      	ldr	r3, [pc, #240]	; (800178c <HAL_GPIO_EXTI_Callback+0x460>)
 800169c:	2202      	movs	r2, #2
 800169e:	601a      	str	r2, [r3, #0]
    			LCDRefreshMenu = 1;
 80016a0:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x474>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
    	break;
 80016a6:	e033      	b.n	8001710 <HAL_GPIO_EXTI_Callback+0x3e4>
    	    if (pointer_pos == 1)
 80016a8:	4b39      	ldr	r3, [pc, #228]	; (8001790 <HAL_GPIO_EXTI_Callback+0x464>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d106      	bne.n	80016be <HAL_GPIO_EXTI_Callback+0x392>
    	    	menu = 3;
 80016b0:	4b36      	ldr	r3, [pc, #216]	; (800178c <HAL_GPIO_EXTI_Callback+0x460>)
 80016b2:	2203      	movs	r2, #3
 80016b4:	601a      	str	r2, [r3, #0]
    	    	LCDRefreshMul = 1;
 80016b6:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x478>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e016      	b.n	80016ec <HAL_GPIO_EXTI_Callback+0x3c0>
    	    else if (pointer_pos == 2)
 80016be:	4b34      	ldr	r3, [pc, #208]	; (8001790 <HAL_GPIO_EXTI_Callback+0x464>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d106      	bne.n	80016d4 <HAL_GPIO_EXTI_Callback+0x3a8>
    	    	menu = 4;
 80016c6:	4b31      	ldr	r3, [pc, #196]	; (800178c <HAL_GPIO_EXTI_Callback+0x460>)
 80016c8:	2204      	movs	r2, #4
 80016ca:	601a      	str	r2, [r3, #0]
    	    	LCDRefreshMul = 1;
 80016cc:	4b35      	ldr	r3, [pc, #212]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x478>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e00b      	b.n	80016ec <HAL_GPIO_EXTI_Callback+0x3c0>
    	    	menu = 1;
 80016d4:	4b2d      	ldr	r3, [pc, #180]	; (800178c <HAL_GPIO_EXTI_Callback+0x460>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
    	    	LCDRefreshPWM = 1;
 80016da:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <HAL_GPIO_EXTI_Callback+0x46c>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]
    	    	LCDRefresh = 1;
 80016e0:	4b29      	ldr	r3, [pc, #164]	; (8001788 <HAL_GPIO_EXTI_Callback+0x45c>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]
    	    	PWMRefresh = 1;
 80016e6:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x47c>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
    	    LCDRefreshMenu = 1;
 80016ec:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x474>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
    	break;
 80016f2:	e00d      	b.n	8001710 <HAL_GPIO_EXTI_Callback+0x3e4>
    		menu = 2;
 80016f4:	4b25      	ldr	r3, [pc, #148]	; (800178c <HAL_GPIO_EXTI_Callback+0x460>)
 80016f6:	2202      	movs	r2, #2
 80016f8:	601a      	str	r2, [r3, #0]
    		LCDRefreshMenu = 1;
 80016fa:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x474>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
    	break;
 8001700:	e006      	b.n	8001710 <HAL_GPIO_EXTI_Callback+0x3e4>
    		menu = 2;
 8001702:	4b22      	ldr	r3, [pc, #136]	; (800178c <HAL_GPIO_EXTI_Callback+0x460>)
 8001704:	2202      	movs	r2, #2
 8001706:	601a      	str	r2, [r3, #0]
    		LCDRefreshMenu = 1;
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x474>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]
    	break;
 800170e:	bf00      	nop
    	LCDRefresh = 1;
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <HAL_GPIO_EXTI_Callback+0x45c>)
 8001712:	2201      	movs	r2, #1
 8001714:	601a      	str	r2, [r3, #0]
}
 8001716:	e02e      	b.n	8001776 <HAL_GPIO_EXTI_Callback+0x44a>
    else if (GPIO_Pin == GPIO_PIN_13)
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800171e:	d12a      	bne.n	8001776 <HAL_GPIO_EXTI_Callback+0x44a>
    	if (menu == 3)
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <HAL_GPIO_EXTI_Callback+0x460>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b03      	cmp	r3, #3
 8001726:	d10e      	bne.n	8001746 <HAL_GPIO_EXTI_Callback+0x41a>
    		if (multiplier == 0)
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_GPIO_EXTI_Callback+0x458>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d103      	bne.n	8001738 <HAL_GPIO_EXTI_Callback+0x40c>
    			multiplier = 1;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <HAL_GPIO_EXTI_Callback+0x458>)
 8001732:	2201      	movs	r2, #1
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e002      	b.n	800173e <HAL_GPIO_EXTI_Callback+0x412>
    			multiplier = 0;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_GPIO_EXTI_Callback+0x458>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
    		LCDRefreshMul = 1;
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x478>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]
}
 8001744:	e017      	b.n	8001776 <HAL_GPIO_EXTI_Callback+0x44a>
    	else if (menu == 4)
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_GPIO_EXTI_Callback+0x460>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b04      	cmp	r3, #4
 800174c:	d110      	bne.n	8001770 <HAL_GPIO_EXTI_Callback+0x444>
    		if (multiplier < 3)
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <HAL_GPIO_EXTI_Callback+0x458>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b02      	cmp	r3, #2
 8001754:	dc05      	bgt.n	8001762 <HAL_GPIO_EXTI_Callback+0x436>
    			multiplier ++;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_GPIO_EXTI_Callback+0x458>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	3301      	adds	r3, #1
 800175c:	4a09      	ldr	r2, [pc, #36]	; (8001784 <HAL_GPIO_EXTI_Callback+0x458>)
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	e002      	b.n	8001768 <HAL_GPIO_EXTI_Callback+0x43c>
    			multiplier = 0;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_GPIO_EXTI_Callback+0x458>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
    		LCDRefreshMul = 1;
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x478>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]
}
 800176e:	e002      	b.n	8001776 <HAL_GPIO_EXTI_Callback+0x44a>
    		multiplier = 0;
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <HAL_GPIO_EXTI_Callback+0x458>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200000c4 	.word	0x200000c4
 8001784:	200000d0 	.word	0x200000d0
 8001788:	200000e4 	.word	0x200000e4
 800178c:	200000c8 	.word	0x200000c8
 8001790:	200000cc 	.word	0x200000cc
 8001794:	200000d4 	.word	0x200000d4
 8001798:	200000ec 	.word	0x200000ec
 800179c:	200000f8 	.word	0x200000f8
 80017a0:	200000e8 	.word	0x200000e8
 80017a4:	200000f0 	.word	0x200000f0
 80017a8:	200000f4 	.word	0x200000f4

080017ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b0:	b672      	cpsid	i
}
 80017b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <Error_Handler+0x8>
	...

080017b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_MspInit+0x4c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <HAL_MspInit+0x4c>)
 80017c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_MspInit+0x4c>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_MspInit+0x4c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a08      	ldr	r2, [pc, #32]	; (8001804 <HAL_MspInit+0x4c>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_MspInit+0x4c>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001818:	d10d      	bne.n	8001836 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_TIM_Base_MspInit+0x3c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a08      	ldr	r2, [pc, #32]	; (8001844 <HAL_TIM_Base_MspInit+0x3c>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_TIM_Base_MspInit+0x3c>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001868:	d11d      	bne.n	80018a6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_TIM_MspPostInit+0x68>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <HAL_TIM_MspPostInit+0x68>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_TIM_MspPostInit+0x68>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001886:	2320      	movs	r3, #32
 8001888:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800188e:	2302      	movs	r3, #2
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001896:	2301      	movs	r3, #1
 8001898:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	4619      	mov	r1, r3
 80018a0:	4804      	ldr	r0, [pc, #16]	; (80018b4 <HAL_TIM_MspPostInit+0x6c>)
 80018a2:	f000 fa3d 	bl	8001d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018a6:	bf00      	nop
 80018a8:	3720      	adds	r7, #32
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <NMI_Handler+0x4>

080018be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <HardFault_Handler+0x4>

080018c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <MemManage_Handler+0x4>

080018ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <BusFault_Handler+0x4>

080018d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <UsageFault_Handler+0x4>

080018d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001904:	f000 f8da 	bl	8001abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001910:	2002      	movs	r0, #2
 8001912:	f000 fbbb 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}

0800191a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800191e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001922:	f000 fbb3 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001926:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800192a:	f000 fbaf 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800193c:	4a14      	ldr	r2, [pc, #80]	; (8001990 <_sbrk+0x5c>)
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <_sbrk+0x60>)
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <_sbrk+0x64>)
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <_sbrk+0x68>)
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	429a      	cmp	r2, r3
 8001962:	d207      	bcs.n	8001974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001964:	f001 fe82 	bl	800366c <__errno>
 8001968:	4603      	mov	r3, r0
 800196a:	220c      	movs	r2, #12
 800196c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	e009      	b.n	8001988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	4a05      	ldr	r2, [pc, #20]	; (8001998 <_sbrk+0x64>)
 8001984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20010000 	.word	0x20010000
 8001994:	00000400 	.word	0x00000400
 8001998:	20000104 	.word	0x20000104
 800199c:	20000258 	.word	0x20000258

080019a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <SystemInit+0x20>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <SystemInit+0x20>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ca:	490e      	ldr	r1, [pc, #56]	; (8001a04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019e0:	4c0b      	ldr	r4, [pc, #44]	; (8001a10 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ee:	f7ff ffd7 	bl	80019a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019f2:	f001 fe41 	bl	8003678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f6:	f7ff f893 	bl	8000b20 <main>
  bx  lr    
 80019fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a04:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001a08:	0800409c 	.word	0x0800409c
  ldr r2, =_sbss
 8001a0c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001a10:	20000254 	.word	0x20000254

08001a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC_IRQHandler>
	...

08001a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0d      	ldr	r2, [pc, #52]	; (8001a58 <HAL_Init+0x40>)
 8001a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <HAL_Init+0x40>)
 8001a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <HAL_Init+0x40>)
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a40:	2003      	movs	r0, #3
 8001a42:	f000 f92b 	bl	8001c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a46:	200f      	movs	r0, #15
 8001a48:	f000 f808 	bl	8001a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4c:	f7ff feb4 	bl	80017b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023c00 	.word	0x40023c00

08001a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_InitTick+0x54>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_InitTick+0x58>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f943 	bl	8001d06 <HAL_SYSTICK_Config>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00e      	b.n	8001aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d80a      	bhi.n	8001aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a90:	2200      	movs	r2, #0
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	f000 f90b 	bl	8001cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a9c:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <HAL_InitTick+0x5c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	20000004 	.word	0x20000004

08001abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_IncTick+0x20>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_IncTick+0x24>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_IncTick+0x24>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	20000108 	.word	0x20000108

08001ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_GetTick+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000108 	.word	0x20000108

08001afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db0b      	blt.n	8001b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	4907      	ldr	r1, [pc, #28]	; (8001b98 <__NVIC_EnableIRQ+0x38>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2001      	movs	r0, #1
 8001b82:	fa00 f202 	lsl.w	r2, r0, r2
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	; (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	; (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c68:	d301      	bcc.n	8001c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00f      	b.n	8001c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <SysTick_Config+0x40>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c76:	210f      	movs	r1, #15
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f7ff ff8e 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <SysTick_Config+0x40>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <SysTick_Config+0x40>)
 8001c88:	2207      	movs	r2, #7
 8001c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	e000e010 	.word	0xe000e010

08001c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ff29 	bl	8001afc <__NVIC_SetPriorityGrouping>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc4:	f7ff ff3e 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	6978      	ldr	r0, [r7, #20]
 8001cd0:	f7ff ff8e 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff5d 	bl	8001b9c <__NVIC_SetPriority>
}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff31 	bl	8001b60 <__NVIC_EnableIRQ>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff ffa2 	bl	8001c58 <SysTick_Config>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e159      	b.n	8001ff0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	f040 8148 	bne.w	8001fea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d005      	beq.n	8001d72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d130      	bne.n	8001dd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da8:	2201      	movs	r2, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 0201 	and.w	r2, r3, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d017      	beq.n	8001e10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d123      	bne.n	8001e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	08da      	lsrs	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3208      	adds	r2, #8
 8001e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	220f      	movs	r2, #15
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	08da      	lsrs	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	69b9      	ldr	r1, [r7, #24]
 8001e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0203 	and.w	r2, r3, #3
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80a2 	beq.w	8001fea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b57      	ldr	r3, [pc, #348]	; (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a56      	ldr	r2, [pc, #344]	; (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b54      	ldr	r3, [pc, #336]	; (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec2:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_GPIO_Init+0x2ec>)
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	220f      	movs	r2, #15
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a49      	ldr	r2, [pc, #292]	; (8002010 <HAL_GPIO_Init+0x2f0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d019      	beq.n	8001f22 <HAL_GPIO_Init+0x202>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a48      	ldr	r2, [pc, #288]	; (8002014 <HAL_GPIO_Init+0x2f4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <HAL_GPIO_Init+0x1fe>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a47      	ldr	r2, [pc, #284]	; (8002018 <HAL_GPIO_Init+0x2f8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00d      	beq.n	8001f1a <HAL_GPIO_Init+0x1fa>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a46      	ldr	r2, [pc, #280]	; (800201c <HAL_GPIO_Init+0x2fc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d007      	beq.n	8001f16 <HAL_GPIO_Init+0x1f6>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a45      	ldr	r2, [pc, #276]	; (8002020 <HAL_GPIO_Init+0x300>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_GPIO_Init+0x1f2>
 8001f0e:	2304      	movs	r3, #4
 8001f10:	e008      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f12:	2307      	movs	r3, #7
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e004      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f22:	2300      	movs	r3, #0
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	f002 0203 	and.w	r2, r2, #3
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f34:	4935      	ldr	r1, [pc, #212]	; (800200c <HAL_GPIO_Init+0x2ec>)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f42:	4b38      	ldr	r3, [pc, #224]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f66:	4a2f      	ldr	r2, [pc, #188]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f90:	4a24      	ldr	r2, [pc, #144]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fba:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	f67f aea2 	bls.w	8001d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40013800 	.word	0x40013800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40020800 	.word	0x40020800
 800201c:	40020c00 	.word	0x40020c00
 8002020:	40021000 	.word	0x40021000
 8002024:	40013c00 	.word	0x40013c00

08002028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e001      	b.n	800204a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	807b      	strh	r3, [r7, #2]
 8002064:	4613      	mov	r3, r2
 8002066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002068:	787b      	ldrb	r3, [r7, #1]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206e:	887a      	ldrh	r2, [r7, #2]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002074:	e003      	b.n	800207e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002076:	887b      	ldrh	r3, [r7, #2]
 8002078:	041a      	lsls	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	619a      	str	r2, [r3, #24]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d006      	beq.n	80020b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff f93e 	bl	800132c <HAL_GPIO_EXTI_Callback>
  }
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40013c00 	.word	0x40013c00

080020bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e267      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d075      	beq.n	80021c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020da:	4b88      	ldr	r3, [pc, #544]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d00c      	beq.n	8002100 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e6:	4b85      	ldr	r3, [pc, #532]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d112      	bne.n	8002118 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020f2:	4b82      	ldr	r3, [pc, #520]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020fe:	d10b      	bne.n	8002118 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	4b7e      	ldr	r3, [pc, #504]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d05b      	beq.n	80021c4 <HAL_RCC_OscConfig+0x108>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d157      	bne.n	80021c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e242      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002120:	d106      	bne.n	8002130 <HAL_RCC_OscConfig+0x74>
 8002122:	4b76      	ldr	r3, [pc, #472]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a75      	ldr	r2, [pc, #468]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e01d      	b.n	800216c <HAL_RCC_OscConfig+0xb0>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x98>
 800213a:	4b70      	ldr	r3, [pc, #448]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a6f      	ldr	r2, [pc, #444]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 8002140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b6d      	ldr	r3, [pc, #436]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a6c      	ldr	r2, [pc, #432]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e00b      	b.n	800216c <HAL_RCC_OscConfig+0xb0>
 8002154:	4b69      	ldr	r3, [pc, #420]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a68      	ldr	r2, [pc, #416]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 800215a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	4b66      	ldr	r3, [pc, #408]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a65      	ldr	r2, [pc, #404]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 8002166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d013      	beq.n	800219c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff fcb6 	bl	8001ae4 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800217c:	f7ff fcb2 	bl	8001ae4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e207      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	4b5b      	ldr	r3, [pc, #364]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0xc0>
 800219a:	e014      	b.n	80021c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7ff fca2 	bl	8001ae4 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a4:	f7ff fc9e 	bl	8001ae4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	; 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e1f3      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b6:	4b51      	ldr	r3, [pc, #324]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0xe8>
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d063      	beq.n	800229a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021d2:	4b4a      	ldr	r3, [pc, #296]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00b      	beq.n	80021f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021de:	4b47      	ldr	r3, [pc, #284]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d11c      	bne.n	8002224 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ea:	4b44      	ldr	r3, [pc, #272]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d116      	bne.n	8002224 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f6:	4b41      	ldr	r3, [pc, #260]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_RCC_OscConfig+0x152>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e1c7      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220e:	4b3b      	ldr	r3, [pc, #236]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4937      	ldr	r1, [pc, #220]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	e03a      	b.n	800229a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d020      	beq.n	800226e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800222c:	4b34      	ldr	r3, [pc, #208]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7ff fc57 	bl	8001ae4 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800223a:	f7ff fc53 	bl	8001ae4 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e1a8      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224c:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002258:	4b28      	ldr	r3, [pc, #160]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4925      	ldr	r1, [pc, #148]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 8002268:	4313      	orrs	r3, r2
 800226a:	600b      	str	r3, [r1, #0]
 800226c:	e015      	b.n	800229a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226e:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7ff fc36 	bl	8001ae4 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227c:	f7ff fc32 	bl	8001ae4 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e187      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d036      	beq.n	8002314 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d016      	beq.n	80022dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <HAL_RCC_OscConfig+0x248>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b4:	f7ff fc16 	bl	8001ae4 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022bc:	f7ff fc12 	bl	8001ae4 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e167      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_RCC_OscConfig+0x240>)
 80022d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x200>
 80022da:	e01b      	b.n	8002314 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_OscConfig+0x248>)
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7ff fbff 	bl	8001ae4 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e8:	e00e      	b.n	8002308 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ea:	f7ff fbfb 	bl	8001ae4 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d907      	bls.n	8002308 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e150      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
 80022fc:	40023800 	.word	0x40023800
 8002300:	42470000 	.word	0x42470000
 8002304:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	4b88      	ldr	r3, [pc, #544]	; (800252c <HAL_RCC_OscConfig+0x470>)
 800230a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ea      	bne.n	80022ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8097 	beq.w	8002450 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002322:	2300      	movs	r3, #0
 8002324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002326:	4b81      	ldr	r3, [pc, #516]	; (800252c <HAL_RCC_OscConfig+0x470>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10f      	bne.n	8002352 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	4b7d      	ldr	r3, [pc, #500]	; (800252c <HAL_RCC_OscConfig+0x470>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a7c      	ldr	r2, [pc, #496]	; (800252c <HAL_RCC_OscConfig+0x470>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b7a      	ldr	r3, [pc, #488]	; (800252c <HAL_RCC_OscConfig+0x470>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234e:	2301      	movs	r3, #1
 8002350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002352:	4b77      	ldr	r3, [pc, #476]	; (8002530 <HAL_RCC_OscConfig+0x474>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d118      	bne.n	8002390 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235e:	4b74      	ldr	r3, [pc, #464]	; (8002530 <HAL_RCC_OscConfig+0x474>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a73      	ldr	r2, [pc, #460]	; (8002530 <HAL_RCC_OscConfig+0x474>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236a:	f7ff fbbb 	bl	8001ae4 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002372:	f7ff fbb7 	bl	8001ae4 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e10c      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	4b6a      	ldr	r3, [pc, #424]	; (8002530 <HAL_RCC_OscConfig+0x474>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x2ea>
 8002398:	4b64      	ldr	r3, [pc, #400]	; (800252c <HAL_RCC_OscConfig+0x470>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	4a63      	ldr	r2, [pc, #396]	; (800252c <HAL_RCC_OscConfig+0x470>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6713      	str	r3, [r2, #112]	; 0x70
 80023a4:	e01c      	b.n	80023e0 <HAL_RCC_OscConfig+0x324>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b05      	cmp	r3, #5
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x30c>
 80023ae:	4b5f      	ldr	r3, [pc, #380]	; (800252c <HAL_RCC_OscConfig+0x470>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b2:	4a5e      	ldr	r2, [pc, #376]	; (800252c <HAL_RCC_OscConfig+0x470>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ba:	4b5c      	ldr	r3, [pc, #368]	; (800252c <HAL_RCC_OscConfig+0x470>)
 80023bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023be:	4a5b      	ldr	r2, [pc, #364]	; (800252c <HAL_RCC_OscConfig+0x470>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6713      	str	r3, [r2, #112]	; 0x70
 80023c6:	e00b      	b.n	80023e0 <HAL_RCC_OscConfig+0x324>
 80023c8:	4b58      	ldr	r3, [pc, #352]	; (800252c <HAL_RCC_OscConfig+0x470>)
 80023ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023cc:	4a57      	ldr	r2, [pc, #348]	; (800252c <HAL_RCC_OscConfig+0x470>)
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	6713      	str	r3, [r2, #112]	; 0x70
 80023d4:	4b55      	ldr	r3, [pc, #340]	; (800252c <HAL_RCC_OscConfig+0x470>)
 80023d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d8:	4a54      	ldr	r2, [pc, #336]	; (800252c <HAL_RCC_OscConfig+0x470>)
 80023da:	f023 0304 	bic.w	r3, r3, #4
 80023de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d015      	beq.n	8002414 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e8:	f7ff fb7c 	bl	8001ae4 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ee:	e00a      	b.n	8002406 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f0:	f7ff fb78 	bl	8001ae4 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e0cb      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002406:	4b49      	ldr	r3, [pc, #292]	; (800252c <HAL_RCC_OscConfig+0x470>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0ee      	beq.n	80023f0 <HAL_RCC_OscConfig+0x334>
 8002412:	e014      	b.n	800243e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002414:	f7ff fb66 	bl	8001ae4 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241a:	e00a      	b.n	8002432 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800241c:	f7ff fb62 	bl	8001ae4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	; 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e0b5      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002432:	4b3e      	ldr	r3, [pc, #248]	; (800252c <HAL_RCC_OscConfig+0x470>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1ee      	bne.n	800241c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800243e:	7dfb      	ldrb	r3, [r7, #23]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d105      	bne.n	8002450 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002444:	4b39      	ldr	r3, [pc, #228]	; (800252c <HAL_RCC_OscConfig+0x470>)
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	4a38      	ldr	r2, [pc, #224]	; (800252c <HAL_RCC_OscConfig+0x470>)
 800244a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80a1 	beq.w	800259c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800245a:	4b34      	ldr	r3, [pc, #208]	; (800252c <HAL_RCC_OscConfig+0x470>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b08      	cmp	r3, #8
 8002464:	d05c      	beq.n	8002520 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d141      	bne.n	80024f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246e:	4b31      	ldr	r3, [pc, #196]	; (8002534 <HAL_RCC_OscConfig+0x478>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7ff fb36 	bl	8001ae4 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247c:	f7ff fb32 	bl	8001ae4 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e087      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248e:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_RCC_OscConfig+0x470>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69da      	ldr	r2, [r3, #28]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	019b      	lsls	r3, r3, #6
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b0:	085b      	lsrs	r3, r3, #1
 80024b2:	3b01      	subs	r3, #1
 80024b4:	041b      	lsls	r3, r3, #16
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	061b      	lsls	r3, r3, #24
 80024be:	491b      	ldr	r1, [pc, #108]	; (800252c <HAL_RCC_OscConfig+0x470>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_RCC_OscConfig+0x478>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7ff fb0b 	bl	8001ae4 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d2:	f7ff fb07 	bl	8001ae4 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e05c      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_RCC_OscConfig+0x470>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x416>
 80024f0:	e054      	b.n	800259c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_RCC_OscConfig+0x478>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7ff faf4 	bl	8001ae4 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002500:	f7ff faf0 	bl	8001ae4 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e045      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_RCC_OscConfig+0x470>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x444>
 800251e:	e03d      	b.n	800259c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d107      	bne.n	8002538 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e038      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
 800252c:	40023800 	.word	0x40023800
 8002530:	40007000 	.word	0x40007000
 8002534:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_RCC_OscConfig+0x4ec>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d028      	beq.n	8002598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d121      	bne.n	8002598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d11a      	bne.n	8002598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002568:	4013      	ands	r3, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800256e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002570:	4293      	cmp	r3, r2
 8002572:	d111      	bne.n	8002598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	3b01      	subs	r3, #1
 8002582:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d107      	bne.n	8002598 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800

080025ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0cc      	b.n	800275a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025c0:	4b68      	ldr	r3, [pc, #416]	; (8002764 <HAL_RCC_ClockConfig+0x1b8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d90c      	bls.n	80025e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ce:	4b65      	ldr	r3, [pc, #404]	; (8002764 <HAL_RCC_ClockConfig+0x1b8>)
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_RCC_ClockConfig+0x1b8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0b8      	b.n	800275a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002600:	4b59      	ldr	r3, [pc, #356]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4a58      	ldr	r2, [pc, #352]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800260a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002618:	4b53      	ldr	r3, [pc, #332]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a52      	ldr	r2, [pc, #328]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002622:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002624:	4b50      	ldr	r3, [pc, #320]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	494d      	ldr	r1, [pc, #308]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	4313      	orrs	r3, r2
 8002634:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d044      	beq.n	80026cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b47      	ldr	r3, [pc, #284]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d119      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e07f      	b.n	800275a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d003      	beq.n	800266a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002666:	2b03      	cmp	r3, #3
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266a:	4b3f      	ldr	r3, [pc, #252]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e06f      	b.n	800275a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267a:	4b3b      	ldr	r3, [pc, #236]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e067      	b.n	800275a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268a:	4b37      	ldr	r3, [pc, #220]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f023 0203 	bic.w	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4934      	ldr	r1, [pc, #208]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	4313      	orrs	r3, r2
 800269a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800269c:	f7ff fa22 	bl	8001ae4 <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	e00a      	b.n	80026ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a4:	f7ff fa1e 	bl	8001ae4 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e04f      	b.n	800275a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	4b2b      	ldr	r3, [pc, #172]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 020c 	and.w	r2, r3, #12
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d1eb      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026cc:	4b25      	ldr	r3, [pc, #148]	; (8002764 <HAL_RCC_ClockConfig+0x1b8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d20c      	bcs.n	80026f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b22      	ldr	r3, [pc, #136]	; (8002764 <HAL_RCC_ClockConfig+0x1b8>)
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_RCC_ClockConfig+0x1b8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e032      	b.n	800275a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4916      	ldr	r1, [pc, #88]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	490e      	ldr	r1, [pc, #56]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	4313      	orrs	r3, r2
 8002730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002732:	f000 f821 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 8002736:	4602      	mov	r2, r0
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	490a      	ldr	r1, [pc, #40]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	5ccb      	ldrb	r3, [r1, r3]
 8002746:	fa22 f303 	lsr.w	r3, r2, r3
 800274a:	4a09      	ldr	r2, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff f982 	bl	8001a5c <HAL_InitTick>

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40023c00 	.word	0x40023c00
 8002768:	40023800 	.word	0x40023800
 800276c:	08004048 	.word	0x08004048
 8002770:	20000000 	.word	0x20000000
 8002774:	20000004 	.word	0x20000004

08002778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800277c:	b090      	sub	sp, #64	; 0x40
 800277e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
 8002784:	2300      	movs	r3, #0
 8002786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002788:	2300      	movs	r3, #0
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002790:	4b59      	ldr	r3, [pc, #356]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b08      	cmp	r3, #8
 800279a:	d00d      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x40>
 800279c:	2b08      	cmp	r3, #8
 800279e:	f200 80a1 	bhi.w	80028e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x34>
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d003      	beq.n	80027b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80027aa:	e09b      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027ac:	4b53      	ldr	r3, [pc, #332]	; (80028fc <HAL_RCC_GetSysClockFreq+0x184>)
 80027ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80027b0:	e09b      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027b2:	4b53      	ldr	r3, [pc, #332]	; (8002900 <HAL_RCC_GetSysClockFreq+0x188>)
 80027b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027b6:	e098      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027b8:	4b4f      	ldr	r3, [pc, #316]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027c2:	4b4d      	ldr	r3, [pc, #308]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d028      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ce:	4b4a      	ldr	r3, [pc, #296]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	099b      	lsrs	r3, r3, #6
 80027d4:	2200      	movs	r2, #0
 80027d6:	623b      	str	r3, [r7, #32]
 80027d8:	627a      	str	r2, [r7, #36]	; 0x24
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027e0:	2100      	movs	r1, #0
 80027e2:	4b47      	ldr	r3, [pc, #284]	; (8002900 <HAL_RCC_GetSysClockFreq+0x188>)
 80027e4:	fb03 f201 	mul.w	r2, r3, r1
 80027e8:	2300      	movs	r3, #0
 80027ea:	fb00 f303 	mul.w	r3, r0, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	4a43      	ldr	r2, [pc, #268]	; (8002900 <HAL_RCC_GetSysClockFreq+0x188>)
 80027f2:	fba0 1202 	umull	r1, r2, r0, r2
 80027f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027f8:	460a      	mov	r2, r1
 80027fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80027fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027fe:	4413      	add	r3, r2
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002804:	2200      	movs	r2, #0
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	61fa      	str	r2, [r7, #28]
 800280a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800280e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002812:	f7fd fd35 	bl	8000280 <__aeabi_uldivmod>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4613      	mov	r3, r2
 800281c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800281e:	e053      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002820:	4b35      	ldr	r3, [pc, #212]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	099b      	lsrs	r3, r3, #6
 8002826:	2200      	movs	r2, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	617a      	str	r2, [r7, #20]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002832:	f04f 0b00 	mov.w	fp, #0
 8002836:	4652      	mov	r2, sl
 8002838:	465b      	mov	r3, fp
 800283a:	f04f 0000 	mov.w	r0, #0
 800283e:	f04f 0100 	mov.w	r1, #0
 8002842:	0159      	lsls	r1, r3, #5
 8002844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002848:	0150      	lsls	r0, r2, #5
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	ebb2 080a 	subs.w	r8, r2, sl
 8002852:	eb63 090b 	sbc.w	r9, r3, fp
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002862:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002866:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800286a:	ebb2 0408 	subs.w	r4, r2, r8
 800286e:	eb63 0509 	sbc.w	r5, r3, r9
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	00eb      	lsls	r3, r5, #3
 800287c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002880:	00e2      	lsls	r2, r4, #3
 8002882:	4614      	mov	r4, r2
 8002884:	461d      	mov	r5, r3
 8002886:	eb14 030a 	adds.w	r3, r4, sl
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	eb45 030b 	adc.w	r3, r5, fp
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800289e:	4629      	mov	r1, r5
 80028a0:	028b      	lsls	r3, r1, #10
 80028a2:	4621      	mov	r1, r4
 80028a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028a8:	4621      	mov	r1, r4
 80028aa:	028a      	lsls	r2, r1, #10
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b2:	2200      	movs	r2, #0
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	60fa      	str	r2, [r7, #12]
 80028b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028bc:	f7fd fce0 	bl	8000280 <__aeabi_uldivmod>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4613      	mov	r3, r2
 80028c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	0c1b      	lsrs	r3, r3, #16
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	3301      	adds	r3, #1
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028e2:	e002      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_GetSysClockFreq+0x184>)
 80028e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3740      	adds	r7, #64	; 0x40
 80028f0:	46bd      	mov	sp, r7
 80028f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800
 80028fc:	00f42400 	.word	0x00f42400
 8002900:	017d7840 	.word	0x017d7840

08002904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <HAL_RCC_GetHCLKFreq+0x14>)
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000000 	.word	0x20000000

0800291c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e041      	b.n	80029b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fe ff60 	bl	8001808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3304      	adds	r3, #4
 8002958:	4619      	mov	r1, r3
 800295a:	4610      	mov	r0, r2
 800295c:	f000 fb24 	bl	8002fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e041      	b.n	8002a50 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d106      	bne.n	80029e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f839 	bl	8002a58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2202      	movs	r2, #2
 80029ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3304      	adds	r3, #4
 80029f6:	4619      	mov	r1, r3
 80029f8:	4610      	mov	r0, r2
 80029fa:	f000 fad5 	bl	8002fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d109      	bne.n	8002a90 <HAL_TIM_PWM_Start+0x24>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e022      	b.n	8002ad6 <HAL_TIM_PWM_Start+0x6a>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d109      	bne.n	8002aaa <HAL_TIM_PWM_Start+0x3e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	bf14      	ite	ne
 8002aa2:	2301      	movne	r3, #1
 8002aa4:	2300      	moveq	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	e015      	b.n	8002ad6 <HAL_TIM_PWM_Start+0x6a>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d109      	bne.n	8002ac4 <HAL_TIM_PWM_Start+0x58>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e008      	b.n	8002ad6 <HAL_TIM_PWM_Start+0x6a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	bf14      	ite	ne
 8002ad0:	2301      	movne	r3, #1
 8002ad2:	2300      	moveq	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e068      	b.n	8002bb0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <HAL_TIM_PWM_Start+0x82>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aec:	e013      	b.n	8002b16 <HAL_TIM_PWM_Start+0xaa>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d104      	bne.n	8002afe <HAL_TIM_PWM_Start+0x92>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002afc:	e00b      	b.n	8002b16 <HAL_TIM_PWM_Start+0xaa>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d104      	bne.n	8002b0e <HAL_TIM_PWM_Start+0xa2>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b0c:	e003      	b.n	8002b16 <HAL_TIM_PWM_Start+0xaa>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	6839      	ldr	r1, [r7, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fce8 	bl	80034f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a23      	ldr	r2, [pc, #140]	; (8002bb8 <HAL_TIM_PWM_Start+0x14c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d107      	bne.n	8002b3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <HAL_TIM_PWM_Start+0x14c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d018      	beq.n	8002b7a <HAL_TIM_PWM_Start+0x10e>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b50:	d013      	beq.n	8002b7a <HAL_TIM_PWM_Start+0x10e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <HAL_TIM_PWM_Start+0x150>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00e      	beq.n	8002b7a <HAL_TIM_PWM_Start+0x10e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a17      	ldr	r2, [pc, #92]	; (8002bc0 <HAL_TIM_PWM_Start+0x154>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d009      	beq.n	8002b7a <HAL_TIM_PWM_Start+0x10e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a16      	ldr	r2, [pc, #88]	; (8002bc4 <HAL_TIM_PWM_Start+0x158>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d004      	beq.n	8002b7a <HAL_TIM_PWM_Start+0x10e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a14      	ldr	r2, [pc, #80]	; (8002bc8 <HAL_TIM_PWM_Start+0x15c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d111      	bne.n	8002b9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b06      	cmp	r3, #6
 8002b8a:	d010      	beq.n	8002bae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9c:	e007      	b.n	8002bae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40000800 	.word	0x40000800
 8002bc4:	40000c00 	.word	0x40000c00
 8002bc8:	40014000 	.word	0x40014000

08002bcc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	6839      	ldr	r1, [r7, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fc88 	bl	80034f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a29      	ldr	r2, [pc, #164]	; (8002c90 <HAL_TIM_PWM_Stop+0xc4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d117      	bne.n	8002c1e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6a1a      	ldr	r2, [r3, #32]
 8002bf4:	f241 1311 	movw	r3, #4369	; 0x1111
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10f      	bne.n	8002c1e <HAL_TIM_PWM_Stop+0x52>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a1a      	ldr	r2, [r3, #32]
 8002c04:	f240 4344 	movw	r3, #1092	; 0x444
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d107      	bne.n	8002c1e <HAL_TIM_PWM_Stop+0x52>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10f      	bne.n	8002c4e <HAL_TIM_PWM_Stop+0x82>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6a1a      	ldr	r2, [r3, #32]
 8002c34:	f240 4344 	movw	r3, #1092	; 0x444
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d107      	bne.n	8002c4e <HAL_TIM_PWM_Stop+0x82>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0201 	bic.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d104      	bne.n	8002c5e <HAL_TIM_PWM_Stop+0x92>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c5c:	e013      	b.n	8002c86 <HAL_TIM_PWM_Stop+0xba>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d104      	bne.n	8002c6e <HAL_TIM_PWM_Stop+0xa2>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c6c:	e00b      	b.n	8002c86 <HAL_TIM_PWM_Stop+0xba>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d104      	bne.n	8002c7e <HAL_TIM_PWM_Stop+0xb2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c7c:	e003      	b.n	8002c86 <HAL_TIM_PWM_Stop+0xba>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40010000 	.word	0x40010000

08002c94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e0ae      	b.n	8002e10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	f200 809f 	bhi.w	8002e00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002cc2:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc8:	08002cfd 	.word	0x08002cfd
 8002ccc:	08002e01 	.word	0x08002e01
 8002cd0:	08002e01 	.word	0x08002e01
 8002cd4:	08002e01 	.word	0x08002e01
 8002cd8:	08002d3d 	.word	0x08002d3d
 8002cdc:	08002e01 	.word	0x08002e01
 8002ce0:	08002e01 	.word	0x08002e01
 8002ce4:	08002e01 	.word	0x08002e01
 8002ce8:	08002d7f 	.word	0x08002d7f
 8002cec:	08002e01 	.word	0x08002e01
 8002cf0:	08002e01 	.word	0x08002e01
 8002cf4:	08002e01 	.word	0x08002e01
 8002cf8:	08002dbf 	.word	0x08002dbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f9d0 	bl	80030a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0208 	orr.w	r2, r2, #8
 8002d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699a      	ldr	r2, [r3, #24]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0204 	bic.w	r2, r2, #4
 8002d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6999      	ldr	r1, [r3, #24]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	619a      	str	r2, [r3, #24]
      break;
 8002d3a:	e064      	b.n	8002e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fa16 	bl	8003174 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6999      	ldr	r1, [r3, #24]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	021a      	lsls	r2, r3, #8
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	619a      	str	r2, [r3, #24]
      break;
 8002d7c:	e043      	b.n	8002e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fa61 	bl	800324c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0208 	orr.w	r2, r2, #8
 8002d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69da      	ldr	r2, [r3, #28]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0204 	bic.w	r2, r2, #4
 8002da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69d9      	ldr	r1, [r3, #28]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	61da      	str	r2, [r3, #28]
      break;
 8002dbc:	e023      	b.n	8002e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 faab 	bl	8003320 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	69da      	ldr	r2, [r3, #28]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69da      	ldr	r2, [r3, #28]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69d9      	ldr	r1, [r3, #28]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	021a      	lsls	r2, r3, #8
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	61da      	str	r2, [r3, #28]
      break;
 8002dfe:	e002      	b.n	8002e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	75fb      	strb	r3, [r7, #23]
      break;
 8002e04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_TIM_ConfigClockSource+0x1c>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e0b4      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x186>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e6c:	d03e      	beq.n	8002eec <HAL_TIM_ConfigClockSource+0xd4>
 8002e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e72:	f200 8087 	bhi.w	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7a:	f000 8086 	beq.w	8002f8a <HAL_TIM_ConfigClockSource+0x172>
 8002e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e82:	d87f      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002e84:	2b70      	cmp	r3, #112	; 0x70
 8002e86:	d01a      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0xa6>
 8002e88:	2b70      	cmp	r3, #112	; 0x70
 8002e8a:	d87b      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002e8c:	2b60      	cmp	r3, #96	; 0x60
 8002e8e:	d050      	beq.n	8002f32 <HAL_TIM_ConfigClockSource+0x11a>
 8002e90:	2b60      	cmp	r3, #96	; 0x60
 8002e92:	d877      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002e94:	2b50      	cmp	r3, #80	; 0x50
 8002e96:	d03c      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0xfa>
 8002e98:	2b50      	cmp	r3, #80	; 0x50
 8002e9a:	d873      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002e9c:	2b40      	cmp	r3, #64	; 0x40
 8002e9e:	d058      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x13a>
 8002ea0:	2b40      	cmp	r3, #64	; 0x40
 8002ea2:	d86f      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea4:	2b30      	cmp	r3, #48	; 0x30
 8002ea6:	d064      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x15a>
 8002ea8:	2b30      	cmp	r3, #48	; 0x30
 8002eaa:	d86b      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d060      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x15a>
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d867      	bhi.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d05c      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x15a>
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d05a      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x15a>
 8002ebc:	e062      	b.n	8002f84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6899      	ldr	r1, [r3, #8]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f000 faf1 	bl	80034b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ee0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	609a      	str	r2, [r3, #8]
      break;
 8002eea:	e04f      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6899      	ldr	r1, [r3, #8]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f000 fada 	bl	80034b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f0e:	609a      	str	r2, [r3, #8]
      break;
 8002f10:	e03c      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f000 fa4e 	bl	80033c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2150      	movs	r1, #80	; 0x50
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 faa7 	bl	800347e <TIM_ITRx_SetConfig>
      break;
 8002f30:	e02c      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6859      	ldr	r1, [r3, #4]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f000 fa6d 	bl	800341e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2160      	movs	r1, #96	; 0x60
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fa97 	bl	800347e <TIM_ITRx_SetConfig>
      break;
 8002f50:	e01c      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f000 fa2e 	bl	80033c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2140      	movs	r1, #64	; 0x40
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fa87 	bl	800347e <TIM_ITRx_SetConfig>
      break;
 8002f70:	e00c      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	f000 fa7e 	bl	800347e <TIM_ITRx_SetConfig>
      break;
 8002f82:	e003      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
      break;
 8002f88:	e000      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a34      	ldr	r2, [pc, #208]	; (800308c <TIM_Base_SetConfig+0xe4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00f      	beq.n	8002fe0 <TIM_Base_SetConfig+0x38>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc6:	d00b      	beq.n	8002fe0 <TIM_Base_SetConfig+0x38>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a31      	ldr	r2, [pc, #196]	; (8003090 <TIM_Base_SetConfig+0xe8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d007      	beq.n	8002fe0 <TIM_Base_SetConfig+0x38>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a30      	ldr	r2, [pc, #192]	; (8003094 <TIM_Base_SetConfig+0xec>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d003      	beq.n	8002fe0 <TIM_Base_SetConfig+0x38>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a2f      	ldr	r2, [pc, #188]	; (8003098 <TIM_Base_SetConfig+0xf0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d108      	bne.n	8002ff2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a25      	ldr	r2, [pc, #148]	; (800308c <TIM_Base_SetConfig+0xe4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01b      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003000:	d017      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a22      	ldr	r2, [pc, #136]	; (8003090 <TIM_Base_SetConfig+0xe8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a21      	ldr	r2, [pc, #132]	; (8003094 <TIM_Base_SetConfig+0xec>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00f      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a20      	ldr	r2, [pc, #128]	; (8003098 <TIM_Base_SetConfig+0xf0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00b      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a1f      	ldr	r2, [pc, #124]	; (800309c <TIM_Base_SetConfig+0xf4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a1e      	ldr	r2, [pc, #120]	; (80030a0 <TIM_Base_SetConfig+0xf8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d003      	beq.n	8003032 <TIM_Base_SetConfig+0x8a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a1d      	ldr	r2, [pc, #116]	; (80030a4 <TIM_Base_SetConfig+0xfc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d108      	bne.n	8003044 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a08      	ldr	r2, [pc, #32]	; (800308c <TIM_Base_SetConfig+0xe4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d103      	bne.n	8003078 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	615a      	str	r2, [r3, #20]
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40010000 	.word	0x40010000
 8003090:	40000400 	.word	0x40000400
 8003094:	40000800 	.word	0x40000800
 8003098:	40000c00 	.word	0x40000c00
 800309c:	40014000 	.word	0x40014000
 80030a0:	40014400 	.word	0x40014400
 80030a4:	40014800 	.word	0x40014800

080030a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f023 0201 	bic.w	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0303 	bic.w	r3, r3, #3
 80030de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f023 0302 	bic.w	r3, r3, #2
 80030f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <TIM_OC1_SetConfig+0xc8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d10c      	bne.n	800311e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f023 0308 	bic.w	r3, r3, #8
 800310a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f023 0304 	bic.w	r3, r3, #4
 800311c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a13      	ldr	r2, [pc, #76]	; (8003170 <TIM_OC1_SetConfig+0xc8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d111      	bne.n	800314a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800312c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	621a      	str	r2, [r3, #32]
}
 8003164:	bf00      	nop
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	40010000 	.word	0x40010000

08003174 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f023 0210 	bic.w	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f023 0320 	bic.w	r3, r3, #32
 80031be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <TIM_OC2_SetConfig+0xd4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d10d      	bne.n	80031f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a15      	ldr	r2, [pc, #84]	; (8003248 <TIM_OC2_SetConfig+0xd4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d113      	bne.n	8003220 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	621a      	str	r2, [r3, #32]
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40010000 	.word	0x40010000

0800324c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 0303 	bic.w	r3, r3, #3
 8003282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a1d      	ldr	r2, [pc, #116]	; (800331c <TIM_OC3_SetConfig+0xd0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d10d      	bne.n	80032c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a14      	ldr	r2, [pc, #80]	; (800331c <TIM_OC3_SetConfig+0xd0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d113      	bne.n	80032f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	621a      	str	r2, [r3, #32]
}
 8003310:	bf00      	nop
 8003312:	371c      	adds	r7, #28
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40010000 	.word	0x40010000

08003320 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800334e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800336a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	031b      	lsls	r3, r3, #12
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a10      	ldr	r2, [pc, #64]	; (80033bc <TIM_OC4_SetConfig+0x9c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d109      	bne.n	8003394 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003386:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	019b      	lsls	r3, r3, #6
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	621a      	str	r2, [r3, #32]
}
 80033ae:	bf00      	nop
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40010000 	.word	0x40010000

080033c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	f023 0201 	bic.w	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f023 030a 	bic.w	r3, r3, #10
 80033fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	621a      	str	r2, [r3, #32]
}
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800341e:	b480      	push	{r7}
 8003420:	b087      	sub	sp, #28
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f023 0210 	bic.w	r2, r3, #16
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003448:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	031b      	lsls	r3, r3, #12
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800345a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003494:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	f043 0307 	orr.w	r3, r3, #7
 80034a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	609a      	str	r2, [r3, #8]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	021a      	lsls	r2, r3, #8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4313      	orrs	r3, r2
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	609a      	str	r2, [r3, #8]
}
 80034e8:	bf00      	nop
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	2201      	movs	r2, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a1a      	ldr	r2, [r3, #32]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	43db      	mvns	r3, r3
 8003516:	401a      	ands	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1a      	ldr	r2, [r3, #32]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	431a      	orrs	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	621a      	str	r2, [r3, #32]
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003554:	2302      	movs	r3, #2
 8003556:	e050      	b.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d018      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a4:	d013      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a18      	ldr	r2, [pc, #96]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00e      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a16      	ldr	r2, [pc, #88]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a15      	ldr	r2, [pc, #84]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d004      	beq.n	80035ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a13      	ldr	r2, [pc, #76]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d10c      	bne.n	80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40010000 	.word	0x40010000
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800
 8003614:	40000c00 	.word	0x40000c00
 8003618:	40014000 	.word	0x40014000

0800361c <siprintf>:
 800361c:	b40e      	push	{r1, r2, r3}
 800361e:	b500      	push	{lr}
 8003620:	b09c      	sub	sp, #112	; 0x70
 8003622:	ab1d      	add	r3, sp, #116	; 0x74
 8003624:	9002      	str	r0, [sp, #8]
 8003626:	9006      	str	r0, [sp, #24]
 8003628:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800362c:	4809      	ldr	r0, [pc, #36]	; (8003654 <siprintf+0x38>)
 800362e:	9107      	str	r1, [sp, #28]
 8003630:	9104      	str	r1, [sp, #16]
 8003632:	4909      	ldr	r1, [pc, #36]	; (8003658 <siprintf+0x3c>)
 8003634:	f853 2b04 	ldr.w	r2, [r3], #4
 8003638:	9105      	str	r1, [sp, #20]
 800363a:	6800      	ldr	r0, [r0, #0]
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	a902      	add	r1, sp, #8
 8003640:	f000 f992 	bl	8003968 <_svfiprintf_r>
 8003644:	9b02      	ldr	r3, [sp, #8]
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
 800364a:	b01c      	add	sp, #112	; 0x70
 800364c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003650:	b003      	add	sp, #12
 8003652:	4770      	bx	lr
 8003654:	20000058 	.word	0x20000058
 8003658:	ffff0208 	.word	0xffff0208

0800365c <memset>:
 800365c:	4402      	add	r2, r0
 800365e:	4603      	mov	r3, r0
 8003660:	4293      	cmp	r3, r2
 8003662:	d100      	bne.n	8003666 <memset+0xa>
 8003664:	4770      	bx	lr
 8003666:	f803 1b01 	strb.w	r1, [r3], #1
 800366a:	e7f9      	b.n	8003660 <memset+0x4>

0800366c <__errno>:
 800366c:	4b01      	ldr	r3, [pc, #4]	; (8003674 <__errno+0x8>)
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000058 	.word	0x20000058

08003678 <__libc_init_array>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	4d0d      	ldr	r5, [pc, #52]	; (80036b0 <__libc_init_array+0x38>)
 800367c:	4c0d      	ldr	r4, [pc, #52]	; (80036b4 <__libc_init_array+0x3c>)
 800367e:	1b64      	subs	r4, r4, r5
 8003680:	10a4      	asrs	r4, r4, #2
 8003682:	2600      	movs	r6, #0
 8003684:	42a6      	cmp	r6, r4
 8003686:	d109      	bne.n	800369c <__libc_init_array+0x24>
 8003688:	4d0b      	ldr	r5, [pc, #44]	; (80036b8 <__libc_init_array+0x40>)
 800368a:	4c0c      	ldr	r4, [pc, #48]	; (80036bc <__libc_init_array+0x44>)
 800368c:	f000 fc6a 	bl	8003f64 <_init>
 8003690:	1b64      	subs	r4, r4, r5
 8003692:	10a4      	asrs	r4, r4, #2
 8003694:	2600      	movs	r6, #0
 8003696:	42a6      	cmp	r6, r4
 8003698:	d105      	bne.n	80036a6 <__libc_init_array+0x2e>
 800369a:	bd70      	pop	{r4, r5, r6, pc}
 800369c:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a0:	4798      	blx	r3
 80036a2:	3601      	adds	r6, #1
 80036a4:	e7ee      	b.n	8003684 <__libc_init_array+0xc>
 80036a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036aa:	4798      	blx	r3
 80036ac:	3601      	adds	r6, #1
 80036ae:	e7f2      	b.n	8003696 <__libc_init_array+0x1e>
 80036b0:	08004094 	.word	0x08004094
 80036b4:	08004094 	.word	0x08004094
 80036b8:	08004094 	.word	0x08004094
 80036bc:	08004098 	.word	0x08004098

080036c0 <__retarget_lock_acquire_recursive>:
 80036c0:	4770      	bx	lr

080036c2 <__retarget_lock_release_recursive>:
 80036c2:	4770      	bx	lr

080036c4 <_free_r>:
 80036c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036c6:	2900      	cmp	r1, #0
 80036c8:	d044      	beq.n	8003754 <_free_r+0x90>
 80036ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036ce:	9001      	str	r0, [sp, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f1a1 0404 	sub.w	r4, r1, #4
 80036d6:	bfb8      	it	lt
 80036d8:	18e4      	addlt	r4, r4, r3
 80036da:	f000 f8df 	bl	800389c <__malloc_lock>
 80036de:	4a1e      	ldr	r2, [pc, #120]	; (8003758 <_free_r+0x94>)
 80036e0:	9801      	ldr	r0, [sp, #4]
 80036e2:	6813      	ldr	r3, [r2, #0]
 80036e4:	b933      	cbnz	r3, 80036f4 <_free_r+0x30>
 80036e6:	6063      	str	r3, [r4, #4]
 80036e8:	6014      	str	r4, [r2, #0]
 80036ea:	b003      	add	sp, #12
 80036ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036f0:	f000 b8da 	b.w	80038a8 <__malloc_unlock>
 80036f4:	42a3      	cmp	r3, r4
 80036f6:	d908      	bls.n	800370a <_free_r+0x46>
 80036f8:	6825      	ldr	r5, [r4, #0]
 80036fa:	1961      	adds	r1, r4, r5
 80036fc:	428b      	cmp	r3, r1
 80036fe:	bf01      	itttt	eq
 8003700:	6819      	ldreq	r1, [r3, #0]
 8003702:	685b      	ldreq	r3, [r3, #4]
 8003704:	1949      	addeq	r1, r1, r5
 8003706:	6021      	streq	r1, [r4, #0]
 8003708:	e7ed      	b.n	80036e6 <_free_r+0x22>
 800370a:	461a      	mov	r2, r3
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	b10b      	cbz	r3, 8003714 <_free_r+0x50>
 8003710:	42a3      	cmp	r3, r4
 8003712:	d9fa      	bls.n	800370a <_free_r+0x46>
 8003714:	6811      	ldr	r1, [r2, #0]
 8003716:	1855      	adds	r5, r2, r1
 8003718:	42a5      	cmp	r5, r4
 800371a:	d10b      	bne.n	8003734 <_free_r+0x70>
 800371c:	6824      	ldr	r4, [r4, #0]
 800371e:	4421      	add	r1, r4
 8003720:	1854      	adds	r4, r2, r1
 8003722:	42a3      	cmp	r3, r4
 8003724:	6011      	str	r1, [r2, #0]
 8003726:	d1e0      	bne.n	80036ea <_free_r+0x26>
 8003728:	681c      	ldr	r4, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	6053      	str	r3, [r2, #4]
 800372e:	440c      	add	r4, r1
 8003730:	6014      	str	r4, [r2, #0]
 8003732:	e7da      	b.n	80036ea <_free_r+0x26>
 8003734:	d902      	bls.n	800373c <_free_r+0x78>
 8003736:	230c      	movs	r3, #12
 8003738:	6003      	str	r3, [r0, #0]
 800373a:	e7d6      	b.n	80036ea <_free_r+0x26>
 800373c:	6825      	ldr	r5, [r4, #0]
 800373e:	1961      	adds	r1, r4, r5
 8003740:	428b      	cmp	r3, r1
 8003742:	bf04      	itt	eq
 8003744:	6819      	ldreq	r1, [r3, #0]
 8003746:	685b      	ldreq	r3, [r3, #4]
 8003748:	6063      	str	r3, [r4, #4]
 800374a:	bf04      	itt	eq
 800374c:	1949      	addeq	r1, r1, r5
 800374e:	6021      	streq	r1, [r4, #0]
 8003750:	6054      	str	r4, [r2, #4]
 8003752:	e7ca      	b.n	80036ea <_free_r+0x26>
 8003754:	b003      	add	sp, #12
 8003756:	bd30      	pop	{r4, r5, pc}
 8003758:	2000024c 	.word	0x2000024c

0800375c <sbrk_aligned>:
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	4e0e      	ldr	r6, [pc, #56]	; (8003798 <sbrk_aligned+0x3c>)
 8003760:	460c      	mov	r4, r1
 8003762:	6831      	ldr	r1, [r6, #0]
 8003764:	4605      	mov	r5, r0
 8003766:	b911      	cbnz	r1, 800376e <sbrk_aligned+0x12>
 8003768:	f000 fba6 	bl	8003eb8 <_sbrk_r>
 800376c:	6030      	str	r0, [r6, #0]
 800376e:	4621      	mov	r1, r4
 8003770:	4628      	mov	r0, r5
 8003772:	f000 fba1 	bl	8003eb8 <_sbrk_r>
 8003776:	1c43      	adds	r3, r0, #1
 8003778:	d00a      	beq.n	8003790 <sbrk_aligned+0x34>
 800377a:	1cc4      	adds	r4, r0, #3
 800377c:	f024 0403 	bic.w	r4, r4, #3
 8003780:	42a0      	cmp	r0, r4
 8003782:	d007      	beq.n	8003794 <sbrk_aligned+0x38>
 8003784:	1a21      	subs	r1, r4, r0
 8003786:	4628      	mov	r0, r5
 8003788:	f000 fb96 	bl	8003eb8 <_sbrk_r>
 800378c:	3001      	adds	r0, #1
 800378e:	d101      	bne.n	8003794 <sbrk_aligned+0x38>
 8003790:	f04f 34ff 	mov.w	r4, #4294967295
 8003794:	4620      	mov	r0, r4
 8003796:	bd70      	pop	{r4, r5, r6, pc}
 8003798:	20000250 	.word	0x20000250

0800379c <_malloc_r>:
 800379c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037a0:	1ccd      	adds	r5, r1, #3
 80037a2:	f025 0503 	bic.w	r5, r5, #3
 80037a6:	3508      	adds	r5, #8
 80037a8:	2d0c      	cmp	r5, #12
 80037aa:	bf38      	it	cc
 80037ac:	250c      	movcc	r5, #12
 80037ae:	2d00      	cmp	r5, #0
 80037b0:	4607      	mov	r7, r0
 80037b2:	db01      	blt.n	80037b8 <_malloc_r+0x1c>
 80037b4:	42a9      	cmp	r1, r5
 80037b6:	d905      	bls.n	80037c4 <_malloc_r+0x28>
 80037b8:	230c      	movs	r3, #12
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	2600      	movs	r6, #0
 80037be:	4630      	mov	r0, r6
 80037c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003898 <_malloc_r+0xfc>
 80037c8:	f000 f868 	bl	800389c <__malloc_lock>
 80037cc:	f8d8 3000 	ldr.w	r3, [r8]
 80037d0:	461c      	mov	r4, r3
 80037d2:	bb5c      	cbnz	r4, 800382c <_malloc_r+0x90>
 80037d4:	4629      	mov	r1, r5
 80037d6:	4638      	mov	r0, r7
 80037d8:	f7ff ffc0 	bl	800375c <sbrk_aligned>
 80037dc:	1c43      	adds	r3, r0, #1
 80037de:	4604      	mov	r4, r0
 80037e0:	d155      	bne.n	800388e <_malloc_r+0xf2>
 80037e2:	f8d8 4000 	ldr.w	r4, [r8]
 80037e6:	4626      	mov	r6, r4
 80037e8:	2e00      	cmp	r6, #0
 80037ea:	d145      	bne.n	8003878 <_malloc_r+0xdc>
 80037ec:	2c00      	cmp	r4, #0
 80037ee:	d048      	beq.n	8003882 <_malloc_r+0xe6>
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	4631      	mov	r1, r6
 80037f4:	4638      	mov	r0, r7
 80037f6:	eb04 0903 	add.w	r9, r4, r3
 80037fa:	f000 fb5d 	bl	8003eb8 <_sbrk_r>
 80037fe:	4581      	cmp	r9, r0
 8003800:	d13f      	bne.n	8003882 <_malloc_r+0xe6>
 8003802:	6821      	ldr	r1, [r4, #0]
 8003804:	1a6d      	subs	r5, r5, r1
 8003806:	4629      	mov	r1, r5
 8003808:	4638      	mov	r0, r7
 800380a:	f7ff ffa7 	bl	800375c <sbrk_aligned>
 800380e:	3001      	adds	r0, #1
 8003810:	d037      	beq.n	8003882 <_malloc_r+0xe6>
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	442b      	add	r3, r5
 8003816:	6023      	str	r3, [r4, #0]
 8003818:	f8d8 3000 	ldr.w	r3, [r8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d038      	beq.n	8003892 <_malloc_r+0xf6>
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	42a2      	cmp	r2, r4
 8003824:	d12b      	bne.n	800387e <_malloc_r+0xe2>
 8003826:	2200      	movs	r2, #0
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	e00f      	b.n	800384c <_malloc_r+0xb0>
 800382c:	6822      	ldr	r2, [r4, #0]
 800382e:	1b52      	subs	r2, r2, r5
 8003830:	d41f      	bmi.n	8003872 <_malloc_r+0xd6>
 8003832:	2a0b      	cmp	r2, #11
 8003834:	d917      	bls.n	8003866 <_malloc_r+0xca>
 8003836:	1961      	adds	r1, r4, r5
 8003838:	42a3      	cmp	r3, r4
 800383a:	6025      	str	r5, [r4, #0]
 800383c:	bf18      	it	ne
 800383e:	6059      	strne	r1, [r3, #4]
 8003840:	6863      	ldr	r3, [r4, #4]
 8003842:	bf08      	it	eq
 8003844:	f8c8 1000 	streq.w	r1, [r8]
 8003848:	5162      	str	r2, [r4, r5]
 800384a:	604b      	str	r3, [r1, #4]
 800384c:	4638      	mov	r0, r7
 800384e:	f104 060b 	add.w	r6, r4, #11
 8003852:	f000 f829 	bl	80038a8 <__malloc_unlock>
 8003856:	f026 0607 	bic.w	r6, r6, #7
 800385a:	1d23      	adds	r3, r4, #4
 800385c:	1af2      	subs	r2, r6, r3
 800385e:	d0ae      	beq.n	80037be <_malloc_r+0x22>
 8003860:	1b9b      	subs	r3, r3, r6
 8003862:	50a3      	str	r3, [r4, r2]
 8003864:	e7ab      	b.n	80037be <_malloc_r+0x22>
 8003866:	42a3      	cmp	r3, r4
 8003868:	6862      	ldr	r2, [r4, #4]
 800386a:	d1dd      	bne.n	8003828 <_malloc_r+0x8c>
 800386c:	f8c8 2000 	str.w	r2, [r8]
 8003870:	e7ec      	b.n	800384c <_malloc_r+0xb0>
 8003872:	4623      	mov	r3, r4
 8003874:	6864      	ldr	r4, [r4, #4]
 8003876:	e7ac      	b.n	80037d2 <_malloc_r+0x36>
 8003878:	4634      	mov	r4, r6
 800387a:	6876      	ldr	r6, [r6, #4]
 800387c:	e7b4      	b.n	80037e8 <_malloc_r+0x4c>
 800387e:	4613      	mov	r3, r2
 8003880:	e7cc      	b.n	800381c <_malloc_r+0x80>
 8003882:	230c      	movs	r3, #12
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	4638      	mov	r0, r7
 8003888:	f000 f80e 	bl	80038a8 <__malloc_unlock>
 800388c:	e797      	b.n	80037be <_malloc_r+0x22>
 800388e:	6025      	str	r5, [r4, #0]
 8003890:	e7dc      	b.n	800384c <_malloc_r+0xb0>
 8003892:	605b      	str	r3, [r3, #4]
 8003894:	deff      	udf	#255	; 0xff
 8003896:	bf00      	nop
 8003898:	2000024c 	.word	0x2000024c

0800389c <__malloc_lock>:
 800389c:	4801      	ldr	r0, [pc, #4]	; (80038a4 <__malloc_lock+0x8>)
 800389e:	f7ff bf0f 	b.w	80036c0 <__retarget_lock_acquire_recursive>
 80038a2:	bf00      	nop
 80038a4:	20000248 	.word	0x20000248

080038a8 <__malloc_unlock>:
 80038a8:	4801      	ldr	r0, [pc, #4]	; (80038b0 <__malloc_unlock+0x8>)
 80038aa:	f7ff bf0a 	b.w	80036c2 <__retarget_lock_release_recursive>
 80038ae:	bf00      	nop
 80038b0:	20000248 	.word	0x20000248

080038b4 <__ssputs_r>:
 80038b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b8:	688e      	ldr	r6, [r1, #8]
 80038ba:	461f      	mov	r7, r3
 80038bc:	42be      	cmp	r6, r7
 80038be:	680b      	ldr	r3, [r1, #0]
 80038c0:	4682      	mov	sl, r0
 80038c2:	460c      	mov	r4, r1
 80038c4:	4690      	mov	r8, r2
 80038c6:	d82c      	bhi.n	8003922 <__ssputs_r+0x6e>
 80038c8:	898a      	ldrh	r2, [r1, #12]
 80038ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038ce:	d026      	beq.n	800391e <__ssputs_r+0x6a>
 80038d0:	6965      	ldr	r5, [r4, #20]
 80038d2:	6909      	ldr	r1, [r1, #16]
 80038d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038d8:	eba3 0901 	sub.w	r9, r3, r1
 80038dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038e0:	1c7b      	adds	r3, r7, #1
 80038e2:	444b      	add	r3, r9
 80038e4:	106d      	asrs	r5, r5, #1
 80038e6:	429d      	cmp	r5, r3
 80038e8:	bf38      	it	cc
 80038ea:	461d      	movcc	r5, r3
 80038ec:	0553      	lsls	r3, r2, #21
 80038ee:	d527      	bpl.n	8003940 <__ssputs_r+0x8c>
 80038f0:	4629      	mov	r1, r5
 80038f2:	f7ff ff53 	bl	800379c <_malloc_r>
 80038f6:	4606      	mov	r6, r0
 80038f8:	b360      	cbz	r0, 8003954 <__ssputs_r+0xa0>
 80038fa:	6921      	ldr	r1, [r4, #16]
 80038fc:	464a      	mov	r2, r9
 80038fe:	f000 faeb 	bl	8003ed8 <memcpy>
 8003902:	89a3      	ldrh	r3, [r4, #12]
 8003904:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800390c:	81a3      	strh	r3, [r4, #12]
 800390e:	6126      	str	r6, [r4, #16]
 8003910:	6165      	str	r5, [r4, #20]
 8003912:	444e      	add	r6, r9
 8003914:	eba5 0509 	sub.w	r5, r5, r9
 8003918:	6026      	str	r6, [r4, #0]
 800391a:	60a5      	str	r5, [r4, #8]
 800391c:	463e      	mov	r6, r7
 800391e:	42be      	cmp	r6, r7
 8003920:	d900      	bls.n	8003924 <__ssputs_r+0x70>
 8003922:	463e      	mov	r6, r7
 8003924:	6820      	ldr	r0, [r4, #0]
 8003926:	4632      	mov	r2, r6
 8003928:	4641      	mov	r1, r8
 800392a:	f000 faab 	bl	8003e84 <memmove>
 800392e:	68a3      	ldr	r3, [r4, #8]
 8003930:	1b9b      	subs	r3, r3, r6
 8003932:	60a3      	str	r3, [r4, #8]
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	4433      	add	r3, r6
 8003938:	6023      	str	r3, [r4, #0]
 800393a:	2000      	movs	r0, #0
 800393c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003940:	462a      	mov	r2, r5
 8003942:	f000 fad7 	bl	8003ef4 <_realloc_r>
 8003946:	4606      	mov	r6, r0
 8003948:	2800      	cmp	r0, #0
 800394a:	d1e0      	bne.n	800390e <__ssputs_r+0x5a>
 800394c:	6921      	ldr	r1, [r4, #16]
 800394e:	4650      	mov	r0, sl
 8003950:	f7ff feb8 	bl	80036c4 <_free_r>
 8003954:	230c      	movs	r3, #12
 8003956:	f8ca 3000 	str.w	r3, [sl]
 800395a:	89a3      	ldrh	r3, [r4, #12]
 800395c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003960:	81a3      	strh	r3, [r4, #12]
 8003962:	f04f 30ff 	mov.w	r0, #4294967295
 8003966:	e7e9      	b.n	800393c <__ssputs_r+0x88>

08003968 <_svfiprintf_r>:
 8003968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800396c:	4698      	mov	r8, r3
 800396e:	898b      	ldrh	r3, [r1, #12]
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	b09d      	sub	sp, #116	; 0x74
 8003974:	4607      	mov	r7, r0
 8003976:	460d      	mov	r5, r1
 8003978:	4614      	mov	r4, r2
 800397a:	d50e      	bpl.n	800399a <_svfiprintf_r+0x32>
 800397c:	690b      	ldr	r3, [r1, #16]
 800397e:	b963      	cbnz	r3, 800399a <_svfiprintf_r+0x32>
 8003980:	2140      	movs	r1, #64	; 0x40
 8003982:	f7ff ff0b 	bl	800379c <_malloc_r>
 8003986:	6028      	str	r0, [r5, #0]
 8003988:	6128      	str	r0, [r5, #16]
 800398a:	b920      	cbnz	r0, 8003996 <_svfiprintf_r+0x2e>
 800398c:	230c      	movs	r3, #12
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	f04f 30ff 	mov.w	r0, #4294967295
 8003994:	e0d0      	b.n	8003b38 <_svfiprintf_r+0x1d0>
 8003996:	2340      	movs	r3, #64	; 0x40
 8003998:	616b      	str	r3, [r5, #20]
 800399a:	2300      	movs	r3, #0
 800399c:	9309      	str	r3, [sp, #36]	; 0x24
 800399e:	2320      	movs	r3, #32
 80039a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80039a8:	2330      	movs	r3, #48	; 0x30
 80039aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003b50 <_svfiprintf_r+0x1e8>
 80039ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039b2:	f04f 0901 	mov.w	r9, #1
 80039b6:	4623      	mov	r3, r4
 80039b8:	469a      	mov	sl, r3
 80039ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039be:	b10a      	cbz	r2, 80039c4 <_svfiprintf_r+0x5c>
 80039c0:	2a25      	cmp	r2, #37	; 0x25
 80039c2:	d1f9      	bne.n	80039b8 <_svfiprintf_r+0x50>
 80039c4:	ebba 0b04 	subs.w	fp, sl, r4
 80039c8:	d00b      	beq.n	80039e2 <_svfiprintf_r+0x7a>
 80039ca:	465b      	mov	r3, fp
 80039cc:	4622      	mov	r2, r4
 80039ce:	4629      	mov	r1, r5
 80039d0:	4638      	mov	r0, r7
 80039d2:	f7ff ff6f 	bl	80038b4 <__ssputs_r>
 80039d6:	3001      	adds	r0, #1
 80039d8:	f000 80a9 	beq.w	8003b2e <_svfiprintf_r+0x1c6>
 80039dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039de:	445a      	add	r2, fp
 80039e0:	9209      	str	r2, [sp, #36]	; 0x24
 80039e2:	f89a 3000 	ldrb.w	r3, [sl]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80a1 	beq.w	8003b2e <_svfiprintf_r+0x1c6>
 80039ec:	2300      	movs	r3, #0
 80039ee:	f04f 32ff 	mov.w	r2, #4294967295
 80039f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039f6:	f10a 0a01 	add.w	sl, sl, #1
 80039fa:	9304      	str	r3, [sp, #16]
 80039fc:	9307      	str	r3, [sp, #28]
 80039fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a02:	931a      	str	r3, [sp, #104]	; 0x68
 8003a04:	4654      	mov	r4, sl
 8003a06:	2205      	movs	r2, #5
 8003a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a0c:	4850      	ldr	r0, [pc, #320]	; (8003b50 <_svfiprintf_r+0x1e8>)
 8003a0e:	f7fc fbe7 	bl	80001e0 <memchr>
 8003a12:	9a04      	ldr	r2, [sp, #16]
 8003a14:	b9d8      	cbnz	r0, 8003a4e <_svfiprintf_r+0xe6>
 8003a16:	06d0      	lsls	r0, r2, #27
 8003a18:	bf44      	itt	mi
 8003a1a:	2320      	movmi	r3, #32
 8003a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a20:	0711      	lsls	r1, r2, #28
 8003a22:	bf44      	itt	mi
 8003a24:	232b      	movmi	r3, #43	; 0x2b
 8003a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a30:	d015      	beq.n	8003a5e <_svfiprintf_r+0xf6>
 8003a32:	9a07      	ldr	r2, [sp, #28]
 8003a34:	4654      	mov	r4, sl
 8003a36:	2000      	movs	r0, #0
 8003a38:	f04f 0c0a 	mov.w	ip, #10
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a42:	3b30      	subs	r3, #48	; 0x30
 8003a44:	2b09      	cmp	r3, #9
 8003a46:	d94d      	bls.n	8003ae4 <_svfiprintf_r+0x17c>
 8003a48:	b1b0      	cbz	r0, 8003a78 <_svfiprintf_r+0x110>
 8003a4a:	9207      	str	r2, [sp, #28]
 8003a4c:	e014      	b.n	8003a78 <_svfiprintf_r+0x110>
 8003a4e:	eba0 0308 	sub.w	r3, r0, r8
 8003a52:	fa09 f303 	lsl.w	r3, r9, r3
 8003a56:	4313      	orrs	r3, r2
 8003a58:	9304      	str	r3, [sp, #16]
 8003a5a:	46a2      	mov	sl, r4
 8003a5c:	e7d2      	b.n	8003a04 <_svfiprintf_r+0x9c>
 8003a5e:	9b03      	ldr	r3, [sp, #12]
 8003a60:	1d19      	adds	r1, r3, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	9103      	str	r1, [sp, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bfbb      	ittet	lt
 8003a6a:	425b      	neglt	r3, r3
 8003a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8003a70:	9307      	strge	r3, [sp, #28]
 8003a72:	9307      	strlt	r3, [sp, #28]
 8003a74:	bfb8      	it	lt
 8003a76:	9204      	strlt	r2, [sp, #16]
 8003a78:	7823      	ldrb	r3, [r4, #0]
 8003a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a7c:	d10c      	bne.n	8003a98 <_svfiprintf_r+0x130>
 8003a7e:	7863      	ldrb	r3, [r4, #1]
 8003a80:	2b2a      	cmp	r3, #42	; 0x2a
 8003a82:	d134      	bne.n	8003aee <_svfiprintf_r+0x186>
 8003a84:	9b03      	ldr	r3, [sp, #12]
 8003a86:	1d1a      	adds	r2, r3, #4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	9203      	str	r2, [sp, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bfb8      	it	lt
 8003a90:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a94:	3402      	adds	r4, #2
 8003a96:	9305      	str	r3, [sp, #20]
 8003a98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003b60 <_svfiprintf_r+0x1f8>
 8003a9c:	7821      	ldrb	r1, [r4, #0]
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	4650      	mov	r0, sl
 8003aa2:	f7fc fb9d 	bl	80001e0 <memchr>
 8003aa6:	b138      	cbz	r0, 8003ab8 <_svfiprintf_r+0x150>
 8003aa8:	9b04      	ldr	r3, [sp, #16]
 8003aaa:	eba0 000a 	sub.w	r0, r0, sl
 8003aae:	2240      	movs	r2, #64	; 0x40
 8003ab0:	4082      	lsls	r2, r0
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	3401      	adds	r4, #1
 8003ab6:	9304      	str	r3, [sp, #16]
 8003ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003abc:	4825      	ldr	r0, [pc, #148]	; (8003b54 <_svfiprintf_r+0x1ec>)
 8003abe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ac2:	2206      	movs	r2, #6
 8003ac4:	f7fc fb8c 	bl	80001e0 <memchr>
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	d038      	beq.n	8003b3e <_svfiprintf_r+0x1d6>
 8003acc:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <_svfiprintf_r+0x1f0>)
 8003ace:	bb1b      	cbnz	r3, 8003b18 <_svfiprintf_r+0x1b0>
 8003ad0:	9b03      	ldr	r3, [sp, #12]
 8003ad2:	3307      	adds	r3, #7
 8003ad4:	f023 0307 	bic.w	r3, r3, #7
 8003ad8:	3308      	adds	r3, #8
 8003ada:	9303      	str	r3, [sp, #12]
 8003adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ade:	4433      	add	r3, r6
 8003ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae2:	e768      	b.n	80039b6 <_svfiprintf_r+0x4e>
 8003ae4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ae8:	460c      	mov	r4, r1
 8003aea:	2001      	movs	r0, #1
 8003aec:	e7a6      	b.n	8003a3c <_svfiprintf_r+0xd4>
 8003aee:	2300      	movs	r3, #0
 8003af0:	3401      	adds	r4, #1
 8003af2:	9305      	str	r3, [sp, #20]
 8003af4:	4619      	mov	r1, r3
 8003af6:	f04f 0c0a 	mov.w	ip, #10
 8003afa:	4620      	mov	r0, r4
 8003afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b00:	3a30      	subs	r2, #48	; 0x30
 8003b02:	2a09      	cmp	r2, #9
 8003b04:	d903      	bls.n	8003b0e <_svfiprintf_r+0x1a6>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0c6      	beq.n	8003a98 <_svfiprintf_r+0x130>
 8003b0a:	9105      	str	r1, [sp, #20]
 8003b0c:	e7c4      	b.n	8003a98 <_svfiprintf_r+0x130>
 8003b0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b12:	4604      	mov	r4, r0
 8003b14:	2301      	movs	r3, #1
 8003b16:	e7f0      	b.n	8003afa <_svfiprintf_r+0x192>
 8003b18:	ab03      	add	r3, sp, #12
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	462a      	mov	r2, r5
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <_svfiprintf_r+0x1f4>)
 8003b20:	a904      	add	r1, sp, #16
 8003b22:	4638      	mov	r0, r7
 8003b24:	f3af 8000 	nop.w
 8003b28:	1c42      	adds	r2, r0, #1
 8003b2a:	4606      	mov	r6, r0
 8003b2c:	d1d6      	bne.n	8003adc <_svfiprintf_r+0x174>
 8003b2e:	89ab      	ldrh	r3, [r5, #12]
 8003b30:	065b      	lsls	r3, r3, #25
 8003b32:	f53f af2d 	bmi.w	8003990 <_svfiprintf_r+0x28>
 8003b36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b38:	b01d      	add	sp, #116	; 0x74
 8003b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b3e:	ab03      	add	r3, sp, #12
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	462a      	mov	r2, r5
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <_svfiprintf_r+0x1f4>)
 8003b46:	a904      	add	r1, sp, #16
 8003b48:	4638      	mov	r0, r7
 8003b4a:	f000 f879 	bl	8003c40 <_printf_i>
 8003b4e:	e7eb      	b.n	8003b28 <_svfiprintf_r+0x1c0>
 8003b50:	08004058 	.word	0x08004058
 8003b54:	08004062 	.word	0x08004062
 8003b58:	00000000 	.word	0x00000000
 8003b5c:	080038b5 	.word	0x080038b5
 8003b60:	0800405e 	.word	0x0800405e

08003b64 <_printf_common>:
 8003b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b68:	4616      	mov	r6, r2
 8003b6a:	4699      	mov	r9, r3
 8003b6c:	688a      	ldr	r2, [r1, #8]
 8003b6e:	690b      	ldr	r3, [r1, #16]
 8003b70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b74:	4293      	cmp	r3, r2
 8003b76:	bfb8      	it	lt
 8003b78:	4613      	movlt	r3, r2
 8003b7a:	6033      	str	r3, [r6, #0]
 8003b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b80:	4607      	mov	r7, r0
 8003b82:	460c      	mov	r4, r1
 8003b84:	b10a      	cbz	r2, 8003b8a <_printf_common+0x26>
 8003b86:	3301      	adds	r3, #1
 8003b88:	6033      	str	r3, [r6, #0]
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	0699      	lsls	r1, r3, #26
 8003b8e:	bf42      	ittt	mi
 8003b90:	6833      	ldrmi	r3, [r6, #0]
 8003b92:	3302      	addmi	r3, #2
 8003b94:	6033      	strmi	r3, [r6, #0]
 8003b96:	6825      	ldr	r5, [r4, #0]
 8003b98:	f015 0506 	ands.w	r5, r5, #6
 8003b9c:	d106      	bne.n	8003bac <_printf_common+0x48>
 8003b9e:	f104 0a19 	add.w	sl, r4, #25
 8003ba2:	68e3      	ldr	r3, [r4, #12]
 8003ba4:	6832      	ldr	r2, [r6, #0]
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	42ab      	cmp	r3, r5
 8003baa:	dc26      	bgt.n	8003bfa <_printf_common+0x96>
 8003bac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bb0:	1e13      	subs	r3, r2, #0
 8003bb2:	6822      	ldr	r2, [r4, #0]
 8003bb4:	bf18      	it	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	0692      	lsls	r2, r2, #26
 8003bba:	d42b      	bmi.n	8003c14 <_printf_common+0xb0>
 8003bbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	4638      	mov	r0, r7
 8003bc4:	47c0      	blx	r8
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	d01e      	beq.n	8003c08 <_printf_common+0xa4>
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	6922      	ldr	r2, [r4, #16]
 8003bce:	f003 0306 	and.w	r3, r3, #6
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	bf02      	ittt	eq
 8003bd6:	68e5      	ldreq	r5, [r4, #12]
 8003bd8:	6833      	ldreq	r3, [r6, #0]
 8003bda:	1aed      	subeq	r5, r5, r3
 8003bdc:	68a3      	ldr	r3, [r4, #8]
 8003bde:	bf0c      	ite	eq
 8003be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003be4:	2500      	movne	r5, #0
 8003be6:	4293      	cmp	r3, r2
 8003be8:	bfc4      	itt	gt
 8003bea:	1a9b      	subgt	r3, r3, r2
 8003bec:	18ed      	addgt	r5, r5, r3
 8003bee:	2600      	movs	r6, #0
 8003bf0:	341a      	adds	r4, #26
 8003bf2:	42b5      	cmp	r5, r6
 8003bf4:	d11a      	bne.n	8003c2c <_printf_common+0xc8>
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	e008      	b.n	8003c0c <_printf_common+0xa8>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	4652      	mov	r2, sl
 8003bfe:	4649      	mov	r1, r9
 8003c00:	4638      	mov	r0, r7
 8003c02:	47c0      	blx	r8
 8003c04:	3001      	adds	r0, #1
 8003c06:	d103      	bne.n	8003c10 <_printf_common+0xac>
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c10:	3501      	adds	r5, #1
 8003c12:	e7c6      	b.n	8003ba2 <_printf_common+0x3e>
 8003c14:	18e1      	adds	r1, r4, r3
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	2030      	movs	r0, #48	; 0x30
 8003c1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c1e:	4422      	add	r2, r4
 8003c20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c28:	3302      	adds	r3, #2
 8003c2a:	e7c7      	b.n	8003bbc <_printf_common+0x58>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	4622      	mov	r2, r4
 8003c30:	4649      	mov	r1, r9
 8003c32:	4638      	mov	r0, r7
 8003c34:	47c0      	blx	r8
 8003c36:	3001      	adds	r0, #1
 8003c38:	d0e6      	beq.n	8003c08 <_printf_common+0xa4>
 8003c3a:	3601      	adds	r6, #1
 8003c3c:	e7d9      	b.n	8003bf2 <_printf_common+0x8e>
	...

08003c40 <_printf_i>:
 8003c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c44:	7e0f      	ldrb	r7, [r1, #24]
 8003c46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c48:	2f78      	cmp	r7, #120	; 0x78
 8003c4a:	4691      	mov	r9, r2
 8003c4c:	4680      	mov	r8, r0
 8003c4e:	460c      	mov	r4, r1
 8003c50:	469a      	mov	sl, r3
 8003c52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c56:	d807      	bhi.n	8003c68 <_printf_i+0x28>
 8003c58:	2f62      	cmp	r7, #98	; 0x62
 8003c5a:	d80a      	bhi.n	8003c72 <_printf_i+0x32>
 8003c5c:	2f00      	cmp	r7, #0
 8003c5e:	f000 80d4 	beq.w	8003e0a <_printf_i+0x1ca>
 8003c62:	2f58      	cmp	r7, #88	; 0x58
 8003c64:	f000 80c0 	beq.w	8003de8 <_printf_i+0x1a8>
 8003c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c70:	e03a      	b.n	8003ce8 <_printf_i+0xa8>
 8003c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c76:	2b15      	cmp	r3, #21
 8003c78:	d8f6      	bhi.n	8003c68 <_printf_i+0x28>
 8003c7a:	a101      	add	r1, pc, #4	; (adr r1, 8003c80 <_printf_i+0x40>)
 8003c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c80:	08003cd9 	.word	0x08003cd9
 8003c84:	08003ced 	.word	0x08003ced
 8003c88:	08003c69 	.word	0x08003c69
 8003c8c:	08003c69 	.word	0x08003c69
 8003c90:	08003c69 	.word	0x08003c69
 8003c94:	08003c69 	.word	0x08003c69
 8003c98:	08003ced 	.word	0x08003ced
 8003c9c:	08003c69 	.word	0x08003c69
 8003ca0:	08003c69 	.word	0x08003c69
 8003ca4:	08003c69 	.word	0x08003c69
 8003ca8:	08003c69 	.word	0x08003c69
 8003cac:	08003df1 	.word	0x08003df1
 8003cb0:	08003d19 	.word	0x08003d19
 8003cb4:	08003dab 	.word	0x08003dab
 8003cb8:	08003c69 	.word	0x08003c69
 8003cbc:	08003c69 	.word	0x08003c69
 8003cc0:	08003e13 	.word	0x08003e13
 8003cc4:	08003c69 	.word	0x08003c69
 8003cc8:	08003d19 	.word	0x08003d19
 8003ccc:	08003c69 	.word	0x08003c69
 8003cd0:	08003c69 	.word	0x08003c69
 8003cd4:	08003db3 	.word	0x08003db3
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	1d1a      	adds	r2, r3, #4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	602a      	str	r2, [r5, #0]
 8003ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e09f      	b.n	8003e2c <_printf_i+0x1ec>
 8003cec:	6820      	ldr	r0, [r4, #0]
 8003cee:	682b      	ldr	r3, [r5, #0]
 8003cf0:	0607      	lsls	r7, r0, #24
 8003cf2:	f103 0104 	add.w	r1, r3, #4
 8003cf6:	6029      	str	r1, [r5, #0]
 8003cf8:	d501      	bpl.n	8003cfe <_printf_i+0xbe>
 8003cfa:	681e      	ldr	r6, [r3, #0]
 8003cfc:	e003      	b.n	8003d06 <_printf_i+0xc6>
 8003cfe:	0646      	lsls	r6, r0, #25
 8003d00:	d5fb      	bpl.n	8003cfa <_printf_i+0xba>
 8003d02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003d06:	2e00      	cmp	r6, #0
 8003d08:	da03      	bge.n	8003d12 <_printf_i+0xd2>
 8003d0a:	232d      	movs	r3, #45	; 0x2d
 8003d0c:	4276      	negs	r6, r6
 8003d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d12:	485a      	ldr	r0, [pc, #360]	; (8003e7c <_printf_i+0x23c>)
 8003d14:	230a      	movs	r3, #10
 8003d16:	e012      	b.n	8003d3e <_printf_i+0xfe>
 8003d18:	682b      	ldr	r3, [r5, #0]
 8003d1a:	6820      	ldr	r0, [r4, #0]
 8003d1c:	1d19      	adds	r1, r3, #4
 8003d1e:	6029      	str	r1, [r5, #0]
 8003d20:	0605      	lsls	r5, r0, #24
 8003d22:	d501      	bpl.n	8003d28 <_printf_i+0xe8>
 8003d24:	681e      	ldr	r6, [r3, #0]
 8003d26:	e002      	b.n	8003d2e <_printf_i+0xee>
 8003d28:	0641      	lsls	r1, r0, #25
 8003d2a:	d5fb      	bpl.n	8003d24 <_printf_i+0xe4>
 8003d2c:	881e      	ldrh	r6, [r3, #0]
 8003d2e:	4853      	ldr	r0, [pc, #332]	; (8003e7c <_printf_i+0x23c>)
 8003d30:	2f6f      	cmp	r7, #111	; 0x6f
 8003d32:	bf0c      	ite	eq
 8003d34:	2308      	moveq	r3, #8
 8003d36:	230a      	movne	r3, #10
 8003d38:	2100      	movs	r1, #0
 8003d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d3e:	6865      	ldr	r5, [r4, #4]
 8003d40:	60a5      	str	r5, [r4, #8]
 8003d42:	2d00      	cmp	r5, #0
 8003d44:	bfa2      	ittt	ge
 8003d46:	6821      	ldrge	r1, [r4, #0]
 8003d48:	f021 0104 	bicge.w	r1, r1, #4
 8003d4c:	6021      	strge	r1, [r4, #0]
 8003d4e:	b90e      	cbnz	r6, 8003d54 <_printf_i+0x114>
 8003d50:	2d00      	cmp	r5, #0
 8003d52:	d04b      	beq.n	8003dec <_printf_i+0x1ac>
 8003d54:	4615      	mov	r5, r2
 8003d56:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d5a:	fb03 6711 	mls	r7, r3, r1, r6
 8003d5e:	5dc7      	ldrb	r7, [r0, r7]
 8003d60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d64:	4637      	mov	r7, r6
 8003d66:	42bb      	cmp	r3, r7
 8003d68:	460e      	mov	r6, r1
 8003d6a:	d9f4      	bls.n	8003d56 <_printf_i+0x116>
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d10b      	bne.n	8003d88 <_printf_i+0x148>
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	07de      	lsls	r6, r3, #31
 8003d74:	d508      	bpl.n	8003d88 <_printf_i+0x148>
 8003d76:	6923      	ldr	r3, [r4, #16]
 8003d78:	6861      	ldr	r1, [r4, #4]
 8003d7a:	4299      	cmp	r1, r3
 8003d7c:	bfde      	ittt	le
 8003d7e:	2330      	movle	r3, #48	; 0x30
 8003d80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d88:	1b52      	subs	r2, r2, r5
 8003d8a:	6122      	str	r2, [r4, #16]
 8003d8c:	f8cd a000 	str.w	sl, [sp]
 8003d90:	464b      	mov	r3, r9
 8003d92:	aa03      	add	r2, sp, #12
 8003d94:	4621      	mov	r1, r4
 8003d96:	4640      	mov	r0, r8
 8003d98:	f7ff fee4 	bl	8003b64 <_printf_common>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d14a      	bne.n	8003e36 <_printf_i+0x1f6>
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295
 8003da4:	b004      	add	sp, #16
 8003da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	f043 0320 	orr.w	r3, r3, #32
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	4833      	ldr	r0, [pc, #204]	; (8003e80 <_printf_i+0x240>)
 8003db4:	2778      	movs	r7, #120	; 0x78
 8003db6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	6829      	ldr	r1, [r5, #0]
 8003dbe:	061f      	lsls	r7, r3, #24
 8003dc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003dc4:	d402      	bmi.n	8003dcc <_printf_i+0x18c>
 8003dc6:	065f      	lsls	r7, r3, #25
 8003dc8:	bf48      	it	mi
 8003dca:	b2b6      	uxthmi	r6, r6
 8003dcc:	07df      	lsls	r7, r3, #31
 8003dce:	bf48      	it	mi
 8003dd0:	f043 0320 	orrmi.w	r3, r3, #32
 8003dd4:	6029      	str	r1, [r5, #0]
 8003dd6:	bf48      	it	mi
 8003dd8:	6023      	strmi	r3, [r4, #0]
 8003dda:	b91e      	cbnz	r6, 8003de4 <_printf_i+0x1a4>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	f023 0320 	bic.w	r3, r3, #32
 8003de2:	6023      	str	r3, [r4, #0]
 8003de4:	2310      	movs	r3, #16
 8003de6:	e7a7      	b.n	8003d38 <_printf_i+0xf8>
 8003de8:	4824      	ldr	r0, [pc, #144]	; (8003e7c <_printf_i+0x23c>)
 8003dea:	e7e4      	b.n	8003db6 <_printf_i+0x176>
 8003dec:	4615      	mov	r5, r2
 8003dee:	e7bd      	b.n	8003d6c <_printf_i+0x12c>
 8003df0:	682b      	ldr	r3, [r5, #0]
 8003df2:	6826      	ldr	r6, [r4, #0]
 8003df4:	6961      	ldr	r1, [r4, #20]
 8003df6:	1d18      	adds	r0, r3, #4
 8003df8:	6028      	str	r0, [r5, #0]
 8003dfa:	0635      	lsls	r5, r6, #24
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	d501      	bpl.n	8003e04 <_printf_i+0x1c4>
 8003e00:	6019      	str	r1, [r3, #0]
 8003e02:	e002      	b.n	8003e0a <_printf_i+0x1ca>
 8003e04:	0670      	lsls	r0, r6, #25
 8003e06:	d5fb      	bpl.n	8003e00 <_printf_i+0x1c0>
 8003e08:	8019      	strh	r1, [r3, #0]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6123      	str	r3, [r4, #16]
 8003e0e:	4615      	mov	r5, r2
 8003e10:	e7bc      	b.n	8003d8c <_printf_i+0x14c>
 8003e12:	682b      	ldr	r3, [r5, #0]
 8003e14:	1d1a      	adds	r2, r3, #4
 8003e16:	602a      	str	r2, [r5, #0]
 8003e18:	681d      	ldr	r5, [r3, #0]
 8003e1a:	6862      	ldr	r2, [r4, #4]
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4628      	mov	r0, r5
 8003e20:	f7fc f9de 	bl	80001e0 <memchr>
 8003e24:	b108      	cbz	r0, 8003e2a <_printf_i+0x1ea>
 8003e26:	1b40      	subs	r0, r0, r5
 8003e28:	6060      	str	r0, [r4, #4]
 8003e2a:	6863      	ldr	r3, [r4, #4]
 8003e2c:	6123      	str	r3, [r4, #16]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e34:	e7aa      	b.n	8003d8c <_printf_i+0x14c>
 8003e36:	6923      	ldr	r3, [r4, #16]
 8003e38:	462a      	mov	r2, r5
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	4640      	mov	r0, r8
 8003e3e:	47d0      	blx	sl
 8003e40:	3001      	adds	r0, #1
 8003e42:	d0ad      	beq.n	8003da0 <_printf_i+0x160>
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	079b      	lsls	r3, r3, #30
 8003e48:	d413      	bmi.n	8003e72 <_printf_i+0x232>
 8003e4a:	68e0      	ldr	r0, [r4, #12]
 8003e4c:	9b03      	ldr	r3, [sp, #12]
 8003e4e:	4298      	cmp	r0, r3
 8003e50:	bfb8      	it	lt
 8003e52:	4618      	movlt	r0, r3
 8003e54:	e7a6      	b.n	8003da4 <_printf_i+0x164>
 8003e56:	2301      	movs	r3, #1
 8003e58:	4632      	mov	r2, r6
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	4640      	mov	r0, r8
 8003e5e:	47d0      	blx	sl
 8003e60:	3001      	adds	r0, #1
 8003e62:	d09d      	beq.n	8003da0 <_printf_i+0x160>
 8003e64:	3501      	adds	r5, #1
 8003e66:	68e3      	ldr	r3, [r4, #12]
 8003e68:	9903      	ldr	r1, [sp, #12]
 8003e6a:	1a5b      	subs	r3, r3, r1
 8003e6c:	42ab      	cmp	r3, r5
 8003e6e:	dcf2      	bgt.n	8003e56 <_printf_i+0x216>
 8003e70:	e7eb      	b.n	8003e4a <_printf_i+0x20a>
 8003e72:	2500      	movs	r5, #0
 8003e74:	f104 0619 	add.w	r6, r4, #25
 8003e78:	e7f5      	b.n	8003e66 <_printf_i+0x226>
 8003e7a:	bf00      	nop
 8003e7c:	08004069 	.word	0x08004069
 8003e80:	0800407a 	.word	0x0800407a

08003e84 <memmove>:
 8003e84:	4288      	cmp	r0, r1
 8003e86:	b510      	push	{r4, lr}
 8003e88:	eb01 0402 	add.w	r4, r1, r2
 8003e8c:	d902      	bls.n	8003e94 <memmove+0x10>
 8003e8e:	4284      	cmp	r4, r0
 8003e90:	4623      	mov	r3, r4
 8003e92:	d807      	bhi.n	8003ea4 <memmove+0x20>
 8003e94:	1e43      	subs	r3, r0, #1
 8003e96:	42a1      	cmp	r1, r4
 8003e98:	d008      	beq.n	8003eac <memmove+0x28>
 8003e9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ea2:	e7f8      	b.n	8003e96 <memmove+0x12>
 8003ea4:	4402      	add	r2, r0
 8003ea6:	4601      	mov	r1, r0
 8003ea8:	428a      	cmp	r2, r1
 8003eaa:	d100      	bne.n	8003eae <memmove+0x2a>
 8003eac:	bd10      	pop	{r4, pc}
 8003eae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003eb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003eb6:	e7f7      	b.n	8003ea8 <memmove+0x24>

08003eb8 <_sbrk_r>:
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	4d06      	ldr	r5, [pc, #24]	; (8003ed4 <_sbrk_r+0x1c>)
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	4608      	mov	r0, r1
 8003ec2:	602b      	str	r3, [r5, #0]
 8003ec4:	f7fd fd36 	bl	8001934 <_sbrk>
 8003ec8:	1c43      	adds	r3, r0, #1
 8003eca:	d102      	bne.n	8003ed2 <_sbrk_r+0x1a>
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	b103      	cbz	r3, 8003ed2 <_sbrk_r+0x1a>
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
 8003ed4:	20000244 	.word	0x20000244

08003ed8 <memcpy>:
 8003ed8:	440a      	add	r2, r1
 8003eda:	4291      	cmp	r1, r2
 8003edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ee0:	d100      	bne.n	8003ee4 <memcpy+0xc>
 8003ee2:	4770      	bx	lr
 8003ee4:	b510      	push	{r4, lr}
 8003ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003eee:	4291      	cmp	r1, r2
 8003ef0:	d1f9      	bne.n	8003ee6 <memcpy+0xe>
 8003ef2:	bd10      	pop	{r4, pc}

08003ef4 <_realloc_r>:
 8003ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef8:	4680      	mov	r8, r0
 8003efa:	4614      	mov	r4, r2
 8003efc:	460e      	mov	r6, r1
 8003efe:	b921      	cbnz	r1, 8003f0a <_realloc_r+0x16>
 8003f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f04:	4611      	mov	r1, r2
 8003f06:	f7ff bc49 	b.w	800379c <_malloc_r>
 8003f0a:	b92a      	cbnz	r2, 8003f18 <_realloc_r+0x24>
 8003f0c:	f7ff fbda 	bl	80036c4 <_free_r>
 8003f10:	4625      	mov	r5, r4
 8003f12:	4628      	mov	r0, r5
 8003f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f18:	f000 f81b 	bl	8003f52 <_malloc_usable_size_r>
 8003f1c:	4284      	cmp	r4, r0
 8003f1e:	4607      	mov	r7, r0
 8003f20:	d802      	bhi.n	8003f28 <_realloc_r+0x34>
 8003f22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f26:	d812      	bhi.n	8003f4e <_realloc_r+0x5a>
 8003f28:	4621      	mov	r1, r4
 8003f2a:	4640      	mov	r0, r8
 8003f2c:	f7ff fc36 	bl	800379c <_malloc_r>
 8003f30:	4605      	mov	r5, r0
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d0ed      	beq.n	8003f12 <_realloc_r+0x1e>
 8003f36:	42bc      	cmp	r4, r7
 8003f38:	4622      	mov	r2, r4
 8003f3a:	4631      	mov	r1, r6
 8003f3c:	bf28      	it	cs
 8003f3e:	463a      	movcs	r2, r7
 8003f40:	f7ff ffca 	bl	8003ed8 <memcpy>
 8003f44:	4631      	mov	r1, r6
 8003f46:	4640      	mov	r0, r8
 8003f48:	f7ff fbbc 	bl	80036c4 <_free_r>
 8003f4c:	e7e1      	b.n	8003f12 <_realloc_r+0x1e>
 8003f4e:	4635      	mov	r5, r6
 8003f50:	e7df      	b.n	8003f12 <_realloc_r+0x1e>

08003f52 <_malloc_usable_size_r>:
 8003f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f56:	1f18      	subs	r0, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bfbc      	itt	lt
 8003f5c:	580b      	ldrlt	r3, [r1, r0]
 8003f5e:	18c0      	addlt	r0, r0, r3
 8003f60:	4770      	bx	lr
	...

08003f64 <_init>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	bf00      	nop
 8003f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6a:	bc08      	pop	{r3}
 8003f6c:	469e      	mov	lr, r3
 8003f6e:	4770      	bx	lr

08003f70 <_fini>:
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f72:	bf00      	nop
 8003f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f76:	bc08      	pop	{r3}
 8003f78:	469e      	mov	lr, r3
 8003f7a:	4770      	bx	lr
